implicit prg : CompiledPrg, rel_vars_perm_map : [DBSymbol -> [RelVar -> [+Nat -> Nat]]], debug_mode : Bool {
  [String -> String*] generated_code(Bool include_runtime, [DBSymbol -> [MethodId]] gen_memb_testers_ids) {
    symbs = program_symbols;
    assert |symbs| <= 64 * 1024; ## IMPLEMENT PROPERLY

    code = ("static final int " & symb_idx_name(s) & " = " & printed(i) & ";" : s @ i <- symbs) & 4 * ("");

    for s @ i <- symbs:
      is_first = mod(i, 100) == 0;
      is_last  = mod(i, 100) == 99 or i == |symbs| - 1;

      code = (code | "static void populateEmbeddedSymbols" & printed(i / 100) & "() {") if is_first;
      code = (code | "  embeddedSymbols[" & printed(i) & "] = \"" & _print_(bare_obj(s)) & "\";");
      code = (code | "}", "", "") if is_last;
    ;

    code = (code |
      "",
      "",
      "public static String[] embeddedSymbols = new String[" & printed(|symbs|) & "];",
      "",
      "",
      "static {"
    );

    for i < (|symbs| + 99) / 100:
      code = (code | "  populateEmbeddedSymbols" & printed(i) & "();");
    ;
    code = (code | "};", "", "");

    env_decl = gen_env_decl(prg) & 4 * ("");

    code = code & env_decl;

    all_cls_arities = [p.arity : pd <- prg.procs, p <~ pd.cls_args];

    cls_obj_typedef = generate_cls_obj_typedef(all_cls_arities);
    code = code & cls_obj_typedef & 4 * ("") if cls_obj_typedef != ();

    code = code & join(((d | "", "") : d <- native_opt_type_decls));
    code = (code | "", "") if native_opt_type_decls != ();

    int_seqs_code = gen_int_seqs_code(prg.int_seqs);

    symbs_seqs_code = symbols_arrays_decls(values(symbols_sets_info));

    // Sorting static blocks in topological order
    static_blocks_dep_map = [b.name -> values(b.nested_blocks) & set(b.links) : b <- prg.static_blocks];
    ord_static_block_names = join((isort(bs) : bs <- topological_sort(static_blocks_dep_map)));
    static_blocks_by_name = [b.name -> b : b <- prg.static_blocks];
    ord_static_blocks = (static_blocks_by_name(b, !!) : b <- ord_static_block_names);

    // Sorting reactive blocks in topological order
    react_blocks_dep_map = [b.name -> [t : unused_var, t <- b.nested_auto_vars] : b <- prg.react_blocks];
    ord_react_blocks_names = join((isort(bs) : bs <- topological_sort(react_blocks_dep_map)));
    react_blocks_by_name = [b.name -> b : b <- prg.react_blocks];
    ord_react_blocks = (react_blocks_by_name(b, !!) : b <- ord_react_blocks_names);

    proc_code = native_code(
      isort(prg.procs),
      isort(prg.bool_procs),
      sorted_lambda_exprs,
      ord_react_blocks,
      ord_static_blocks,
      prg.int_seqs
    );

    static_blocks_map = [b.name -> b : b <- prg.static_blocks];
    let prg = prg, typedefs = prg.typedefs:
      react_auto_wrappers = (react_auto_wrapper(b) : b <- ord_react_blocks);
      rel_auto_wrappers = (
        static_auto_wrapper(b, static_blocks_map, lookup(gen_memb_testers_ids, b.name, [])) : b <- ord_static_blocks
      );
      inter_types_decls = interface_types_decls;
      inter_types_docs = interface_types_docs;

      decl_types_conv_functs = [
        ("") & decl_type_import_functions(t) & ("") & decl_type_export_function(t)
        : t <- declared_types
      ];
    ;

    decl_types_conv_functs = join((("", "") & t : t <- isort(decl_types_conv_functs)));

    wrappers = [name & ".java" -> src_code : name, src_code, unused_var <~ react_auto_wrappers] &
               [name & ".java" -> src_code : name, src_code, unused_var <~ rel_auto_wrappers] &
               inter_types_decls;

    wrappers_docs = join(intermix(
      (docs : unused_var_1, unused_var_2, docs <- react_auto_wrappers) &
      (docs : unused_var_1, unused_var_2, docs <- rel_auto_wrappers) &
      isort(inter_types_docs),
      ("", "")
    ));
    wrappers_docs = ("package net.cell_lang;", "", "") & wrappers_docs if wrappers_docs != ();

    has_automata = prg.react_blocks != [] or prg.static_blocks != [];

    has_main = (p <- prg.procs : p.name == proc_symbol(:main));

    gen_code = join((
      ( "package net.cell_lang;",
        "",
        "import java.io.File;",
        "import java.io.FileOutputStream;",
        "import java.io.IOException;",
        "import java.io.OutputStreamWriter;",
        "import java.io.PrintWriter;",
        "import java.io.StringWriter;",
        "import java.io.Writer;",
        "import java.io.Reader;",
        "import java.io.StringReader;",
        "import java.nio.file.Files;",
        // "import java.nio.file.Path;",
        "import java.nio.file.Paths;",
        "import java.util.ArrayList;",
        "import java.util.Arrays;",
        "import java.util.function.IntPredicate;",
        "import java.util.HashMap;",
        "import java.util.IdentityHashMap;",
        "import java.util.NoSuchElementException;",
        "import java.util.Random;",
        "",
        "",
        "class Generated {" if has_main,
        "public class Generated {" if not has_main
      ),

      indent_lines(code & proc_code & ("", "") & symbs_seqs_code & decl_types_conv_functs),

      indent_lines(custom_parser),

      indent_lines(c_main_fn(debug_mode)) if has_main,

      ("}", ""),

      // Runtime support for the functional subset of the language
      core_runtime if include_runtime,
      private_class_def(value_class_def) if has_main and include_runtime,
      ("") if include_runtime,

      // Runtime support for mutable relation variables
      table_runtime if include_runtime and has_automata,
      ("") if include_runtime and has_automata,

      // Runtime support for wrapping code
      interface_runtime if include_runtime and has_automata,
      ("") if include_runtime and has_automata
    ));

    gen_code = gen_code & int_seqs_code;

    if has_main:
      unused_wrappers = [private_class_def(wrapper_code) : unused_var, wrapper_code <- wrappers];
      wrappers = [];
      gen_code = gen_code & join(isort(unused_wrappers));
    ;

    files = ["Generated.java" -> gen_code, "interfaces.txt" -> wrappers_docs if wrappers_docs != ()] & wrappers;
    if include_runtime and not has_main:
      files = files & ["Value.java" -> value_class_def];
    ;
    return files;


    String* generate_cls_obj_typedef([NzNat] arities) {
      return () if arities == [];
      methods = ((
        "  public Obj invoke(" & append(("Obj a" & printed(i) : i < a), ", ") & ", Env env) {",
        "    throw new UnsupportedOperationException();",
        "  }"
        ) : a <- isort(arities)
      );
      return ("static class Lambda {") & join(intermix(methods, (""))) & ("}");
    }
  }
}

String* private_class_def(String* class_def) = (
    if take(l, 8) == "package " or take(l, 7) == "import "
      then ""
    elif take(l, 16) == "public interface"
      then drop(l, 7)
    elif take(l, 12) == "public class"
      then drop(l, 7)
    else l
  : l <- class_def
);


String* gen_env_decl(CompiledPrg prg) {
  all_impl_args = union([p.impl_args : p <- prg.procs]);

  env_decl = ("static class Env {") & ("  public Obj " & native_var_decl_name(impl_arg(bare_id(a))) & ";" : a <- isort(all_impl_args));

  semi_consts_cache_vars = isort([p.name : p <- prg.procs, p.cached and p.impl_args != []]);
  semi_consts_cache_vars_decls = ("  public Obj " & memo_var_name(v) & ";" : v <- semi_consts_cache_vars);
  env_decl = (env_decl | "") & semi_consts_cache_vars_decls if semi_consts_cache_vars_decls != ();

  env_decl = env_decl & ("};");


  return env_decl;
}


String native_int_type(Int min_val, Int max_val) {
  for lb, up, type_name <- type_bounds:
    return type_name if min_val >= lb and max_val < up;
  ;
  return "long";


  (Int, Int, String)+ type_bounds = (
    (-pow(2, 7),    pow(2, 7),    "byte"),
    (-pow(2, 15),   pow(2, 15),   "short"),
    (-pow(2, 31),   pow(2, 31),   "int")
  );
}


String* gen_int_seqs_code(Int+* int_seqs) {
  defs = (("", "") & gen_int_seq_code(s, i) : s @ i <- int_seqs);
  return join(defs);
}


String* gen_int_seq_code(Int+ int_seq, Nat seq_id) {
  min_elem = min(int_seq);
  max_elem = max(int_seq);

  type_name = native_int_type(min_elem, max_elem);

  sgn = "  public static " & type_name & "[] data = {";

  strs = (printed(n) : n <- int_seq);
  total_len = sum((length(s) : s <- strs)) + 2 * |strs|;

  code = ("class " & const_int_seq_holder_class_name(seq_id) & " {");

  if total_len < 60:
    code = (code | sgn & append(strs, ", ") & "};");
  else
    max_len = nat(max((length(printed(n)) : n <- (min_elem, max_elem))));
    last_idx = |int_seq| - 1;
    strs = (align_text(s, max_len, ascii_space) & if i != last_idx then ", " else "" : s @ i <- strs);
    cont_lines = ("    " & append(ss) : ss <- split_into_groups(strs, nz_nat(100 / (max_len + 2))));
    code = code & (sgn) & cont_lines & ("  };");
  ;
  code = (code | "}");

  return code;


  T+* split_into_groups(T+ items, NzNat max_group_size) {
    len = |items|;
    num_of_comp_groups = len / max_group_size;
    comp_groups_total_size = num_of_comp_groups * max_group_size;
    last_group_size = len - comp_groups_total_size;
    groups = (nonempty(subseq(items, i * max_group_size, max_group_size)) : i < num_of_comp_groups);
    groups = (groups | nonempty(subseq(items, comp_groups_total_size, last_group_size))) if last_group_size > 0;
    return groups;
  }


  String align_text(String str, Nat len, Nat filler) {
    str_len = length(str);
    filling = if len >= str_len then string(nat(len-str_len) * (filler)) else "";
    return filling & str;
  }
}


String* symbols_arrays_decls([(Symbol+, Nat)] symbs_seqs) {
  ord_symbs_seqs = sort_set(symbs_seqs, right($a) < right($b));
  return (symbols_array_decl(ss, i) : ss, i <- ord_symbs_seqs);

  String symbols_array_decl(Symbol+ symbs, Nat index) {
    name = const_symb_seq_name(index);
    symbs_strs = (symb_idx_name(s) : s <- symbs);
    return "public static int[] " & name & " = {" & append(symbs_strs, ", ") & "};";
  }
}


String* gen_vars_decls(Instr* body, [ObjProcArg] args) {
  vars_to_decl = [v : v <- vars_to_declare(body, args), not v :: AuxVar];

  vector_vars = [v : v <- vars_to_decl, v :: VecVar];
  scalar_vars = vars_to_decl - vector_vars;

  scalar_vars_by_type = group_by(scalar_vars, native_var_type);
  scalar_vars_decls = (
    t & " " & append((native_var_decl_name(v) : v <- isort(vs)), ", ") & ";"
    : t, vs <- isort(scalar_vars_by_type)
  );

  vec_vars_by_id = group_by(vector_vars, $.id);
  new_vec_vars = [vvar(id, nz_nat(max([v.size : v <- vs]))) : id, vs <- vec_vars_by_id];
  vec_vars_decls = (var_decl(v) : v <- isort(new_vec_vars));

  assert {
    vec_var_ids  = [v.id : v <- vector_vars];
    ref_new_vec_vars = [vvar(id, nz_nat(max(nonempty([v.size : v <- vector_vars, v.id == id])))) : id <- vec_var_ids];
    return new_vec_vars == ref_new_vec_vars;
  };

  return scalar_vars_decls & vec_vars_decls;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit prg : CompiledPrg, rel_vars_perm_map : [DBSymbol -> [RelVar -> [+Nat -> Nat]]], debug_mode : Bool {
  String* native_code(ObjProcDef* obj_proc_defs, BoolProcDef* bool_proc_defs, LambdaExpr* lambda_exprs, ReactBlock* react_blocks, StaticBlock* static_blocks, Int+* int_seqs) {
    type_checking_fns = join((native_code(d) & ("", "") : d <- bool_proc_defs)) & 4 * ("");
    closures = join((gen_lambda(d, i) & ("", "") : d @ i <- lambda_exprs)) & 4 * ("");
    functions = join((native_code(d) & ("", "") : d <- obj_proc_defs));

    static_blocks_code = join((("", "") & native_static_block_decl(b) : b <- static_blocks));
    react_blocks_code = join((("", "") & native_react_block_decl(b) : b <- react_blocks));

    return join((
      type_checking_fns,
      closures,
      functions,
      static_blocks_code,
      react_blocks_code
    ));
  }


  String* native_code(ProcDef pd) {
    cached = pd.cached? and pd.cached;

    fn_name = native_fn_name(pd.name);

    suffix = if cached then "_calculate" else "";

    args_list = gen_args_list(pd);
    args_list_str = append(args_list, ", ");

    signature = "static " & ret_type_str(pd) & " " & fn_name & suffix & "(" & args_list_str & ")";

    body = pd.body;
    auto_vars_types = if pd.loc_auto_vars? then pd.loc_auto_vars else [];
    db_vars_types = if pd.loc_db_vars? then pd.loc_db_vars else [];

    var_decls = gen_vars_decls(body, if pd.args? then set(pd.args) else []);

    auto_vars = isort(keys(auto_vars_types));
    auto_var_decls = (native_name(auto_vars_types[v]) & " " & native_var_decl_name(v) & ";" : v <- auto_vars);

    db_vars_decls = (native_name(t) & " " & native_var_decl_name(v) & ";" : v, t <- isort(db_vars_types));
    aux_db_vars_decls = (aux_struct_c_name(t) & " " & aux_struct_var_decl_name(v) & ";" : v, t <- isort(db_vars_types));

    comp_body = native_code(body, nothing);

    has_var_decls = var_decls != () or auto_var_decls != () or db_vars_decls != ();
    code = (signature & " {",) & indent_lines(var_decls) & indent_lines(auto_var_decls) &
           indent_lines(db_vars_decls) & indent_lines(aux_db_vars_decls) &
           ("" if has_var_decls) & indent_lines(comp_body) & ("}");

    if cached:
      is_real_const = pd.cached? and pd.impl_args == [];
      cache_var_name = if is_real_const then fn_name & "__CV" else "env." & memo_var_name(pd.name);
      needs_set_flag = is_real_const and pd.ret_val_repr? and not is_nullable(pd.ret_val_repr);
      set_flag_name = if needs_set_flag then fn_name & "__CI" else "???"; ## UGLY UGLY UGLY
      ret_type_name = ret_type_str(pd);
      cast = if ret_type_name != "Obj" then " (" & ret_type_name & ")" else "";

      wrapper_code = (
        "",
        "",
        "static " & ret_type_name & " " & cache_var_name & ";" if is_real_const,
        "static boolean " & set_flag_name & ";" if needs_set_flag,
        "" if is_real_const,
        "static " & ret_type_name & " " & fn_name & "(" & args_list_str & ") {",
        "  if (" & cache_var_name & " == null)" if not needs_set_flag,
        "  if (!" & set_flag_name & ") {" if needs_set_flag,
        "    " & cache_var_name & " = " & fn_name & suffix & "(env);",
        "    " & set_flag_name & " = true;" if needs_set_flag,
        "  }" if needs_set_flag,
        "  return" & cast & " " & cache_var_name & ";",
        "}"
      );
      code = code & wrapper_code;
    ;

    return code;


    Nat arity(ProcDef pd) =
      obj_proc_def()    = in_arity(pd),
      bool_proc_def()   = pd.arity;

    String ret_type_str(ProcDef proc_def) =
      obj_proc_def()    = native_type(proc_def.ret_val_repr),
      bool_proc_def()   = "boolean";

    String* gen_args_list(ObjProcDef pd) {
      args = (native_var_type(v) & " " & native_var_decl_name(v) : v <- pd.args);
      cls_args = ("Lambda " & native_var_decl_name(a.var) : a <- pd.cls_args);
      rel_auto_args = join((
        ( native_name(a.type) & " " & native_var_decl_name(a.var),
          aux_struct_c_name(a.type) & " " & aux_struct_var_decl_name(a.var)
        ) : a <- pd.rel_auto_args
      ));
      react_auto_args = (native_name(a.type) & " " & native_var_decl_name(a.var) : a <- pd.react_auto_args);
      args_list = args & cls_args & rel_auto_args & react_auto_args;
      args_list = (args_list | "Env env") if not pd.name :: ConvFnId;
      return args_list;
    }

    String* gen_args_list(BoolProcDef pd) = ("Obj " & native_var_decl_name(fn_arg(n)) : n < arity(pd));
  }


  String* gen_lambda(LambdaExpr lambda, Nat id) {
    body = remove_dead_code(lambda.cls.body); ## BAD BAD BAD: THIS OUGHT TO BE DONE IN DEAD CODE REMOVAL, NOT HERE
    vars_decls = gen_vars_decls(body, []);
    comp_body = native_code(body, nothing);
    full_body = vars_decls & ("" if vars_decls != ()) & comp_body;

    code = (
      "static class Lambda" & printed(id) & " extends Lambda {",
      "  public " & native_name(value(lambda.capt_auto)) & " capt_auto;" if lambda.capt_auto != nothing
    );
    for i < |lambda.capt_vars|:
      code = (code | "  public Obj " & native_var_decl_name(capt_var(i)) & ";");
    ;
    for i < |lambda.capt_cls_vars|:
      code = (code | "  public Lambda " & native_var_name(capt_cls_var(i)) & ";");
    ;

    return (code |
      "",
      "  public Obj invoke(" & append(("Obj a" & printed(i) & ", " : i < lambda.cls.arity)) & "Env env) {"
    ) & indent_lines(indent_lines(full_body)) &
    ( "  }",
      "}"
    );
  }
}

////////////////////////////////////////////////////////////////////////////////

type EncodInst  = blank_obj, ObjExpr, ElemVar, PendingInputVar, VecVar, ArrayVar, BoolExpr, IntExpr,
                  Int32Expr, FloatExpr, ItVar, StreamVar, AnyClsVar, AnyTableVar, AnyValueStoreId,
                  AnyAutoVar, AnyDBVar;


String native_code(EncodInst enc) = native_expr(enc);
String native_code(String str)    = str;


protocol Encodable:
  native_code : Encodable -> String;


String native_method_call_expr(Encodable target, String method_name, Encodable* args) =
  native_code(target) & "." & method_name & "(" & append((native_code(a) : a <- args), ", ") & ")";

String native_method_call(Encodable target, String method_name, Encodable* args) =
  native_method_call_expr(target, method_name, args) & ";";

String native_method_call(Encodable res, Encodable target, String method_name, Encodable* args) =
  native_code(res) & " = " & native_method_call(target, method_name, args);

String native_static_call(String static_name, Encodable* args) =
  static_name & "(" & append((native_code(a) : a <- args), ", ") & ");";

String native_static_call(Encodable res, String static_name, Encodable* args) =
  native_code(res) & " = " & native_static_call(static_name, args);

String native_new_call(Encodable res, String obj_type, Encodable* args) =
  native_code(res) & " = new " & obj_type & "(" & append((native_code(a) : a <- args), ", ") & ");";

String native_assignment_code(Encodable var, Encodable value) =
  native_code(var) & " = " & native_code(value) & ";";

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

String* custom_parser = (
  "",
  "",
  "final static class Parser extends net.cell_lang.Parser {",
  "  Parser(TokenStream tokens) {",
  "    super(tokens);",
  "  }",
  "",
  "  Obj createTaggedObj(int tagId, Obj obj) {",
  "    return convertGenericTaggedValue(SymbObj.get(tagId), obj);",
  "  }",
  "}",
  "",
  "",
  "public static Obj parse(Obj text) {",
  "  return parse(new StringReader(text.getString()));",
  "}",
  "",
  "",
  "public static Obj parse(Reader reader) {",
  "  try {",
  "    TokenStream tokens = new Tokenizer(new CharStream(reader));",
  "    Parser parser = new Parser(tokens);",
  "    Obj obj = parser.parseObj();",
  "    parser.checkEof();",
  "    return Builder.createTaggedObj(SymbTable.SuccessSymbId, obj);",
  "  }",
  "  catch (ParsingException e) {",
  "    return Builder.createTaggedObj(SymbTable.FailureSymbId, IntObj.get(e.errorOffset));",
  "  }",
  "}"
);


String* c_main_fn(Bool exit_on_soft_fail) = (
  "",
  "",
  "public static void main(String[] args) {",
  "  Obj[] cellArgs = new Obj[args.length];",
  "  for (int i=0 ; i < args.length ; i++)",
  "    cellArgs[i] = Miscellanea.strToObj(args[i]);",
  "  Env env = new Env();",
  "  Miscellanea.exitOnSoftFail = true;" if exit_on_soft_fail,
  "  Obj res = Main_P(Builder.createSeq(cellArgs), env);",
  "  Miscellanea.performProcessEndActions();",
  "  System.exit(res.isInt() ? (int) res.getLong() : 0);",
  "}"
);
