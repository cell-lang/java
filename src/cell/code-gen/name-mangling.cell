//  A     Atom integer representation
//  B     AnyRelVar
//  C     ClsVar
//  D
//  E     Cached no-positional-argument function value
//  F     Function
//  G     Aggregate function
//  H
//  I
//  J
//  K     null_locks_count_var()
//  L     Optimized record field
//  M     MembVar                                                     MethodId
//  N     Reactive automaton named nodes
//  O
//  P                                                                             ProcSymbol
//  Q
//  R     AnyAutoVar                                                              AutoSymbol
//  S     SignalVar
//  T     AnyDBVar                                                                DBSymbol
//  U     up_to_date_var()                                            UpdateId
//  V     StdVar, env. + ImplArg, internal var + description
//  W
//  X     update_source_var()
//  Y     shadow_array_var()
//  Z


String native_var_name(LocOptTagRecVar var) =
  match (var.id)
    <+>     = printed(var.id) & "_Vr_" & printed(var.tag),
    <*..*>  = "r" & printed(var.id) & "_" & printed(var.index) & "_" & printed(var.tag);


String native_var_name(OptTagRecFnArg var) = "a" & printed(var.id);


String opt_tag_rec_name(Symbol tag, Nat idx) {
  idx_str = if idx != 0 then "_" & printed(idx) else "";
  return "Obj_" & upper_camel_case(tag) & idx_str;
}

String opt_rec_field_name(Symbol label) = printed(label) & "_L";

String opt_rec_field_nonempty_test_var(Symbol label) = printed(label) & "_Ls";

////////////////////////////////////////////////////////////////////////////////

String block_label(Int id) = "block" & printed(id);

////////////////////////////////////////////////////////////////////////////////

String symb_idx_name(Atom symb) = _print_(symb) & "_A";

String symb_idx_name(SymbObj symb) =
  object(a?)  = symb_idx_name(a);

////////////////////////////////////////////////////////////////////////////////

type QualifiableVars    = ObjVar, PendingInputVar, BoolVar, IntVar, Int32Var, FloatVar,
                          AnyAutoVar, AnyDBVar, AnyTableVar, AnyValueStoreId;

type UnqualifiableVars  = OptTagRecVar, VecVar, ArrayVar, ItVar, StreamVar, AnyClsVar;

String native_var_decl_name(QualifiableVars v) = native_var_name(v, false);
String native_var_ref_name(QualifiableVars v)  = native_var_name(v, true);

String native_var_decl_name(UnqualifiableVars v) = native_var_name(v);
String native_var_ref_name(UnqualifiableVars v)  = native_var_name(v);

/////////////////////////////////////////////////////////////////////////////////////

String native_var_decl_name(MembIntVectVar v) =
  nodes_to_update_vect_var()  = "nodes_to_update_" & printed(v.level),
  changed_outputs()           = "changed_outputs";

/////////////////////////////////////////////////////////////////////////////////////

String native_var_name(VecVar v)        = "vec" & printed(v.id);
String native_var_name(SeqItVar v)      = "seqIt" & printed(bare_id_2(v));
String native_var_name(SetItVar v)      = "setIt" & printed(bare_id_2(v));
String native_var_name(BinRelItVar v)   = "binRelIt" & printed(bare_id_2(v));
String native_var_name(TernRelItVar v)  = "ternRelIt" & printed(bare_id_2(v));
String native_var_name(StreamVar v)     = "stream" & printed(bare_id_2(v));

String native_var_name(ArrayVar var) =
  avar()              = "y" & printed(var.id) & "_" & native_type(var.repr),
  shadow_array_var()  = printed(var.id) & "_Y_" & native_type(var.repr);

String native_var_name(TableItVar v) {
  prefix = match (v.arity, v.symmetric)
    1,  false   = "unary",
    2,  false   = "bin",
    2,  true    = "symBin",
    3,  false   = "tern",
    3,  true    = "symTern";

  return prefix & "TableIt" & printed(v.id);
}

String native_var_name(ColumnItVar var) {
  prefix = match (var.repr)
    object  = "obj",
    int     = "int",
    float   = "float";
  return prefix & "ColIt" & printed(var.id);
}

String native_var_name(AnyClsVar v) =
  cls_var(<+> a?)     = _print_(a) & "_C",
  cls_var(<*..*> n?)  = "cls_" & printed(n),
  capt_cls_var(n?)    = "capt_cls_" & printed(n);

/////////////////////////////////////////////////////////////////////////////////////

String native_var_name(<ObjVar, PendingInputVar> var, Bool add_prefix) {
  assert match (var)
    qual_signal_var() |
    qual_memb_var()   = add_prefix,
    _                 = true;

  prefix = if add_prefix
    then match (var)
      impl_arg()          = "env.",
      prev_var_value()    = "this.",
      pending_state_var() = "updater.",
      _                   = "this."
    else "";

  return match (var)
    var(<+> a?)                   = if   a == hidden_var_0_id then "h0"
                                    elif a == hidden_var_1_id then "h1"
                                                              else _print_(a) & "_V",
    fn_arg(<*..*> n?)             = "a" & printed(n),
    impl_arg(<+> a?)              = prefix & _print_(a) & "_V",
    capt_var(<*..*> n?)           = "capt_var_"  & printed(n),
    memb_var(<+> a?)              = prefix & _print_(a) & "_M",
    signal_var(a?)                = prefix & _print_(a) & "_S",
    qual_signal_var()             = native_var_name(var.auto_var, true) & "." & native_var_name(var.memb_var, false),
    qual_memb_var()               = native_var_name(var.db_var, true) & "." & native_var_name(var.memb_var, false),
    watched_signal_value_var(a?)  = prefix & _print_(a) & "_Sw",
    prev_var_value(v?)            = prefix & ad_hoc_var_name(v) & "d",
    pending_state_var(a?)         = prefix & _print_(a) & "_Mp",
    lvar(<*..*> n?)               = "v" & printed(n),
    evar()                        = "vec" & printed(var.id) & "[(int)(" & native_idx_expr(var.idx) & ")]",
    pending_input_var(<+> a?)     = prefix & _print_(a) & "_Sp";


  String ad_hoc_var_name(SignalVar var)     = native_var_decl_name(var);
  String ad_hoc_var_name(QualSignalVar var) = ad_hoc_var_name(var.auto_var) & "_" & ad_hoc_var_name(var.memb_var);
  String ad_hoc_var_name(NestedAutoVar var) = native_var_name(var, false);
  String ad_hoc_var_name(LocAutoVar)        = undefined;
}


String native_var_name(BoolVar var, Bool add_prefix) {
  prefix = if add_prefix
    then match (var)
      nested_db_spent() = "updater.",
      _                 = "this."
    else "";

  return match (var)
    bvar(<+> s?)                                  = printed(s) & "_Vb",
    bvar(<*..*> n?)                               = "b" & printed(n),
    bool_arg(n?)                                  = "a" & printed(n),
    nested_db_spent(v?)                           = prefix & native_var_decl_name(v) & "s",
    cond_value_var(n?)                            = prefix & "cond_" & printed(n),
    cond_is_def_var(n?)                           = prefix & "cond_def_" & printed(n),
    watched_signal_up_to_date_var(a?)             = prefix & _print_(a) & "_Uw",
    up_to_date_var(std_block_node_id(a?))         = prefix & _print_(a) & "_U",
    up_to_date_var(cond_node_id(n?))              = prefix & "cond_up_to_date_" & printed(n),
    up_to_date_var(nested_auto_node_id(a?))       = prefix & _print_(a) & "_Ua",
    up_to_date_var(nested_auto_input_id() id?)    = prefix & _print_(id.auto) & "_Ua_" & _print_(id.input),
    is_new                                        = prefix & "is_new",
    qual_bool_var() = native_var_name(var.auto_var, add_prefix) & "." & native_var_name(var.memb_var, false);
}


String native_var_name(IntVar v, Bool add_prefix) {
  assert match (v)
    changed_output()  |
    elapsed_time()    = add_prefix,
    _                 = true;

  prefix = if add_prefix then "this." else "";
  return match (v)
    ivar(<+> s?)                        = printed(s) & "_Vl",
    ivar(<*..*> n?)                     = "l" & printed(n),
    int_arg(n?)                         = "a" & printed(n),
    curr_time                           = "curr_time",
    update_time                         = "update_time",
    update_expr_index                   = "update_expr_index",
    update_source_var(a?)               = prefix & _print_(a) & "_V_update_source",
    null_locks_count_var(a?)            = prefix & _print_(a) & "_V_null_locks_count",
    update_count_var(l?)                = prefix & "update_count_" & printed(l),
    nodes_to_update_var()               = prefix & "nodes_to_update_" & printed(v.level) & "[(int) (" & native_idx_expr(v.index) & ")]",
    next_trigger_time_var(a?)           = prefix & _print_(a) & "_V_next_trigger_time",
    curr_time_slot_var(a?)              = prefix & _print_(a) & "_V_curr_time_slot",
    time_triggers_count_var             = prefix & "time_triggers_count",
    trigger_times_heap_var(i?)          = prefix & "trigger_times_heap[" & printed(i) & "]",
    time_varying_cond_ids_heap_var(i?)  = prefix & "time_varying_cond_ids_heap[" & printed(i) & "]",
    last_update_time                    = prefix & "last_update_time",
    elapsed_time                        = prefix & "elapsed_time",
    changed_outputs_count               = prefix & "changed_outputs_count",
    changed_output()                    = prefix & "changed_outputs[(int) (" & native_idx_expr(v.index) & ")]",
    elapsed_time(av?)                   = native_var_name(av, false) & ".elapsed_time",
    nested_auto_int_var()               = native_var_name(v.auto_var, true) & "." & native_var_name(v.memb_var, false);
}


String native_var_name(Int32Var, Bool add_prefix) =
  ivar32(n?)                = "i" & printed(n),
  shadow_surr_var(v?)       = _print_(bare_id(v)) & "_Vs",
  shadow_array_size_var(s?) = _print_(s) & "_Yc";


String native_var_name(FloatVar v, Bool add_prefix) =
  fvar(<+> s?)    = printed(s) & "_Vf",
  fvar(<*..*> n?) = "f" & printed(n),
  float_arg(n?)   = "a" & printed(n);


String native_var_name(AnyAutoVar v, Bool add_prefix) =
  loc_auto_var(a?)    = _print_(a) & "_R",
  nested_auto_var(a?) = {if add_prefix then "this." else ""} & _print_(a) & "_R";


String native_var_name(AnyDBVar v, Bool add_prefix) =
  loc_db_var(a?)    = _print_(a) & "_T",
  nested_db_var(a?) = {if add_prefix then "this." else ""} & _print_(a) & "_T",
  linked_db_var(n?) = "(*" & {if add_prefix then "this." else ""} & "linkedAuto" & printed(n) & ")",
  qual_db_var()     = native_var_name(v.outer, add_prefix) & "." & native_var_name(v.inner, false);


String native_var_name(AnyTableVar var, Bool add_prefix) {
  return match (var)
    table_var(v?)             = {if add_prefix then "this." else ""} & native_name(v),
    qual_table_var()          = native_var_name(var.db_var, add_prefix) & "." & native_var_name(var.table_var, false),
    capt_table_var(v?)        = { assert add_prefix; return "this.capt_auto." & native_var_name(v, false);};

  String native_name(PhysRelVar) =
    phys_rel_var(s?)      = _print_(s) & "_B",
    split_rel_var(v?, n?) = native_name(v) & "_" & _print_(n);
}


String native_var_name(AnyValueStoreId v, Bool add_prefix) =
  value_store_id(n?)        = {if add_prefix then "this." else ""} & "valueStore" & printed(n),
  nested_value_store_id()   = { assert add_prefix;
                                db_var_str = native_var_name(v.db_var, true);
                                return db_var_str & "." & native_var_name(v.store_id, false);
                              },
  capt_value_store_id(id?)  = { assert add_prefix;
                                return "this.capt_auto." & native_var_name(id, false);
                              };

///////////////////////////////////////////////////////////////////////////////

String native_surr_obj_mapper_name(ValueStoreId v) =
  value_store_id(n?)  = "surrToObj" & printed(n);

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

String native_idx_expr(Nat n)                             = printed(n);
String native_idx_expr(IntVar v)                          = native_var_ref_name(v);
String native_idx_expr(<add(val1: IntVar, val2: Nat)> e)  = native_var_ref_name(e.val1) & " + " & printed(e.val2);

////////////////////////////////////////////////////////////////////////////////

String pending_updates_var_decl_name(TableVar var) {
  return match (var)
    table_var(v?) = native_name(v);

  String native_name(PhysRelVar) =
    phys_rel_var(s?)      = _print_(s) & "_Bp",
    split_rel_var(v?, n?) = native_name(v) & "_" & _print_(n);
}

String pending_updates_var_ref_name(TableVar table_var) = "updater." & pending_updates_var_decl_name(table_var);

String aux_struct_var_decl_name(<LocDBVar, NestedDBVar> db_var) = native_var_decl_name(db_var) & "x";

String aux_struct_var_ref_name(LocDBVar db_var) = aux_struct_var_decl_name(db_var);

String aux_struct_var_ref_name(NestedDBVar db_var) = "updater." & aux_struct_var_decl_name(db_var);

String aux_struct_var_decl_name(ValueStoreId vs) =
  value_store_id(n?)  = "valueStoreUpdater" & printed(n);

String aux_struct_var_ref_name(ValueStoreId vs) = "updater." & aux_struct_var_decl_name(vs);

////////////////////////////////////////////////////////////////////////////////

String var_decl(AnyVar v) =
  vvar() = "Obj[] " & native_var_decl_name(v) & " = new Obj[" & printed(v.size) & "];",
  _      = native_var_type(v) & " " & native_var_decl_name(v) & ";";

////////////////////////////////////////////////////////////////////////////////

String memo_var_name(<ProcSymbol, MembTestPredId, SubAggrFnId, ConvFnId>) = undefined;

String memo_var_name(FnId id) =
  fn_family_id()  = native_fn_symb_name(id.symbol) & "_E",
  unique_fn_id()  = memo_var_name(id.family) & printed(id.id),
  nested_fn_id()  = native_fn_name(id.outer) & "_" & memo_var_name(id.inner);

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

String time_slots_table_name(AutoSymbol auto_name, Atom table_id) =
  native_name(auto_name) & "_" & _print_(table_id) & "_Bt";


String native_var_type(ObjVar)            = "Obj";
String native_var_type(IntVar)            = "long";
String native_var_type(Int32Var)          = "int";
String native_var_type(MembIntVectVar)    = "long[]";
String native_var_type(BoolVar)           = "boolean";
String native_var_type(FloatVar)          = "double";
String native_var_type(OptTagRecVar var)  = opt_tag_rec_name(var.tag, var.index);

String native_var_type(SeqItVar v)     = "SeqIter";
String native_var_type(SetItVar v)     = "SetIter";
String native_var_type(BinRelItVar v)  = "BinRelIter";
String native_var_type(TernRelItVar v) = "TernRelIter";
String native_var_type(StreamVar v)    = "java.util.ArrayList<Obj>";

String native_var_type(VecVar v)       = undefined;
String native_var_type(TableItVar v)   = table_it_var_type(v);
String native_var_type(ColumnItVar v)  = column_it_var_type(v);
String native_var_type(ArrayVar v)     = native_elt_type(v) & "[]";

String native_elt_type(ArrayVar var) = native_type(var.repr);

String native_type(LowLevelEltRepr) =
  bool      = "boolean",
  int8      = "byte",
  nat8      = "byte",
  int16     = "short",
  int32     = "int",
  int       = "long",
  float     = "double",
  symbol    |
  object    = "Obj",
  array()   = undefined;


String native_type(OptTagRecRepr repr) = opt_tag_rec_name(repr.tag, repr.index);


Bool is_nullable(LowLevelEltRepr) =
  bool      |
  int8      |
  nat8      |
  int16     |
  int32     |
  int       |
  float     = false,
  symbol    |
  object    = true,
  array()   = undefined;

Bool is_nullable(OptTagRecRepr) = true;


String native_table_type(Table table) =
  match (arity(table), table.symmetric)
    1,  false   = "UnaryTable",
    2,  false   = "BinaryTable",
    2,  true    = "SymBinaryTable",
    3,  false   = "TernaryTable",
    3,  true    = "Sym12TernaryTable";

String native_table_type(Column column) =
  match (column.repr)
    object    = "ObjColumn",
    int       = "IntColumn",
    float     = "FloatColumn";


String native_table_base_type(Table table)    = native_table_type(table);
String native_table_base_type(Column column)  = "ColumnBase";


String table_it_var_type(TableItVar var) =
  match (var.arity, var.symmetric)
    1,  false   = "UnaryTable.Iter",
    2,  false   = "BinaryTable.Iter",
    2,  true    = "SymBinaryTable.Iter",
    3,  false   = "TernaryTable.Iter",
    3,  true    = "Sym12TernaryTable.Iter";

String column_it_var_type(ColumnItVar var) =
  match (var.repr)
    object    = "ObjColumn.Iter",
    int       = "IntColumn.Iter",
    float     = "FloatColumn.Iter";

String pending_updates_var_type(Table table) =
  match (arity(table), table.symmetric)
    1,  false   = "UnaryTableUpdater",
    2,  false   = "BinaryTableUpdater",
    2,  true    = "SymBinaryTableUpdater",
    3,  false   = "TernaryTableUpdater",
    3,  true    = "Sym12TernaryTableUpdater";

String pending_updates_var_type(Column column) =
  match (column.repr)
    object    = "ObjColumnUpdater",
    int       = "IntColumnUpdater",
    float     = "FloatColumnUpdater";


String native_name(ValueStoreType) =
  integer               |
  mono_tagged_integer() = "IntStore",
  object                = "ObjStore";

String native_updater_type(ValueStoreType vs) = native_name(vs) & "Updater";

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

String native_const(<blank, undefined> state) =
  {if state == :blank then "BlankObj" else "NullObj"} & ".singleton";

////////////////////////////////////////////////////////////////////////////////

String native_name(AutoSymbol) = auto_symbol(a?) = upper_camel_case(a) & "_R";

String native_name(DBSymbol) = db_symbol(a?) = upper_camel_case(a) & "_T";

String aux_struct_c_name(<AutoSymbol, DBSymbol> symb) = native_name(symb) & "x";

String native_name(MethodId meth_id) {
  id_str = if meth_id.id? then uppercase_encoding(meth_id.id) else "";
  return _print_(bare_id(meth_id.symbol)) & "_M" & printed(meth_id.arity) & id_str;
}

String native_name(UpdateId id) =
  main_handler    = "msgHandler",
  handler_id(n?)  = "msgHandler_" & uppercase_encoding(n),
  update_id()     = { id_str = if id.id? then uppercase_encoding(id.id) else "";
                      return _print_(bare_id(id.symbol)) & "_U" & printed(id.arity) & id_str;
                    };

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

## THE PARAMETER SHOULD BE REMOVED...

String copy_state_proc_name         (DBSymbol db_type) = "copyState";
String write_state_proc_name        (DBSymbol db_type) = "writeState";
String set_state_proc_name          (DBSymbol db_type) = "setState";
String reconstruct_proc_name        (DBSymbol db_type) = "reconstruct";
String updater_creation_proc_name   (DBSymbol db_type) = "newUpdater";
String updater_reset_proc_name      (DBSymbol db_type) = "resetUpdater";
String updates_copy_proc_name       (DBSymbol db_type) = "copy";
String updates_apply_proc_name      (DBSymbol db_type) = "apply";
String updates_finish_proc_name     (DBSymbol db_type) = "finish";
String updates_check_proc_name      (DBSymbol db_type) = "check";
String full_check_proc_name         (DBSymbol db_type) = "fullCheck";
String update_entry_point_name      (DBSymbol db_type) = "updateEntryPoint";
String init_method_name             (DBSymbol db_type) = "init";
String cleanup_method_name          (DBSymbol db_type) = "cleanup";

String state_is_def_proc_name(AutoSymbol auto_type) = "stateIsDef";

String set_state_proc_name(AutoSymbol auto_type) = "setState";

String copy_state_proc_name     (AutoSymbol auto_type) = "copyState";
String pre_init_method_name     (AutoSymbol auto_type) = "preinit";
String apply_method_name        (AutoSymbol auto_type) = "apply";
String cleanup_method_name      (AutoSymbol auto_type) = "cleanup";
String insert_timer_method_name (AutoSymbol auto_type) = "insertTimer";
String clear_timer_method_name  (AutoSymbol auto_type) = "clearTimer";

String update_name(DBSymbol db, UpdateId id) = native_name(id);
String user_def_method_name(<AutoSymbol, DBSymbol> type, MethodId method) = native_name(method);

String input_set_method_name(AutoSymbol auto, Atom input) = _print_(input) & "_S_set";

String node_update_method_name(AutoSymbol auto_type,  BlockNodeId node_id) = node_specific_method_name_prefix(node_id, auto_type) & "_update";
String queue_node_update_method_name(AutoSymbol auto_type, BlockNodeId node_id) = node_specific_method_name_prefix(node_id, auto_type) & "_invalidate";

String node_specific_method_name_prefix(BlockNodeId id, AutoSymbol auto) =
  std_block_node_id(a?)   = _print_(a) & "_N",
  cond_node_id(n?)        = "cond_node_" & printed(n),
  nested_auto_node_id(a?) = _print_(a) & "_Na",
  nested_auto_input_id()  = _print_(id.auto) & "_Na_" & _print_(id.input);

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

String const_int_seq_holder_class_name(Nat seq_id) = "_Data" & printed(seq_id);

String const_int_seq_ref_name(Nat seq_id) = const_int_seq_holder_class_name(seq_id) & ".data";

String const_symb_seq_name(Nat seq_id) = "constSymbolSeq" & printed(seq_id);

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

String native_fn_name(FnId id) =
  fn_family_id()    = native_fn_symb_name(id.symbol, id.arity),
  unique_fn_id()    = native_fn_name(id.family) & uppercase_encoding(id.id),
  nested_fn_id()    = native_fn_name(id.outer) & "_" & native_fn_name(id.inner);

String native_fn_symb_name(FnSymbol fn_symb, Nat arity) =
  fn_symbol(symb?)    = _print_(symb) & "_F" & printed(arity),
  op_symbol(op?)      = _print_(op);

String native_fn_symb_name(FnSymbol fn_symb) =
  fn_symbol(symb?)    = _print_(symb),
  op_symbol(op?)      = _print_(op);


String native_fn_name(MembTestPredId) =
  memb_test(<+> a?)         = "is" & upper_camel_case(a),
  memb_test(<*..*> n?)      = "is_type_" & printed(n),
  memb_test(a1?, <+> a2?)   = "is" & upper_camel_case(a2) & "_" & upper_camel_case(a1),
  memb_test(a?, <*..*> n?)  = "is" & upper_camel_case(a) & "_" & printed(n);


String native_fn_base_name(AggrFnId) =
  aggr_fn_id(s?)            = _print_(s) & "_G",
  unique_aggr_fn_id(s?, i?) = _print_(s) & "_G" & uppercase_encoding(i);

String native_fn_name(SubAggrFnId) =
  red_var_init(id?, v?)   = native_fn_base_name(id) & "i_" & _print_(_untag_(v)),
  red_vars_merge(id?, v?) = native_fn_base_name(id) & "m_" & _print_(_untag_(v)),
  final_value_yield(id?)  = native_fn_base_name(id) & "f",
  null_value(id?)         = native_fn_base_name(id) & "e";


String native_fn_name(ProcSymbol proc_symb) {
  bare_symb = match (proc_symb) proc_symbol(s?) = s;
  name = upper_camel_case(bare_symb) & "_P";
  name = "Procs." & name if bare_symb :: <file_read, file_write, print, get_char>;
  return name;
}


String native_fn_name(ConvFnId) =
  any_tag_obj_conv          = "convertGenericTaggedValue",
  tag_rec_conv(t?)          = "convertTaggedValue_" & upper_camel_case(t),
  tag_rec_repr_conv(t?, i?) = "convertTaggedValue_" & upper_camel_case(t) & "_" & printed(i);

////////////////////////////////////////////////////////////////////////////////

String lower_camel_case(Atom a) = lower_camel_case(_print_(a), false);

String lower_camel_case(String s, Bool keep_underscores) {
  first = false;
  res = ();
  for ch @ i <- chars(s):
    tr_ch = ch;
    if ch == ascii_underscore:
      first = true;
    else
      tr_ch = nat(ch - ascii_lower_a + ascii_upper_a) if ch >= ascii_lower_a and ch <= ascii_lower_z and first; ## CREATE PRELUDE FUNCTION is_lower()/is_upper() AND to_lower()/to_upper()
      first = false;
    ;
    res = res & (tr_ch if tr_ch != ascii_underscore or keep_underscores);
  ;
  return string(res);
}