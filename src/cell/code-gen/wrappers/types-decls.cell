implicit prg : CompiledPrg {
  // Types used at the boundary between generated and host code
  [NeType] boundary_types {
    react_blocks_types = [t : b <- prg.react_blocks, t <- interface_types(b)];
    static_blocks_map = [b.name -> b : b <- prg.static_blocks];
    static_blocks_types = [t : b <- prg.static_blocks, t <- interface_types(b, static_blocks_map)];
    return react_blocks_types & static_blocks_types;
  }


  // Types with a user-defined name that need to be declared
  [TypeSymbol] named_interface_types {
    let typedefs = prg.typedefs {
      // Retrieving all type symbols that are referenced either directly or indirectly
      type_symbs = reachable_type_symbols(boundary_types);
      // Filtering out the type symbols that do not correspond to a nameable type
      type_symbs = [ts : ts <- type_symbs, is_nameable(cast_ne_type(expand_type_ref(ts, typedefs)))];
    }
    return type_symbs;
  }


  // Types with a user-defined name that need to be declared, and their corresponding definitions
  [NamedInterType -> DeclInterType] named_interface_types_defs {
    let typedefs = prg.typedefs {
      // Mapping each type name to its corresponding interface type
      inter_type_defs = [
        :named(ts) -> {
          exp_type = cast_ne_type(expand_type_ref(ts, typedefs));
          inter_type = interface_type(exp_type);
          assert inter_type :: DeclInterType;
          fail if not inter_type :: DeclInterType;
          return inter_type;
        } : ts <- named_interface_types
      ];
    }
    return inter_type_defs;
  }


  // Types that need to be declared
  [DeclInterType] declared_types {
    let typedefs = prg.typedefs
      inter_types = [interface_type(t) : t <- boundary_types];
    named_types = [n : t <- inter_types, n <- nested_named_types(t)];
    loop {
      new_inter_types = [named_interface_types_defs(t, !!) : t <- named_types];
      new_named_types = [n : t <- new_inter_types, n <- nested_named_types(t)] - named_types;
      break if new_named_types == [];
      named_types = named_types & new_named_types;
    }
    direct_decl_types = [d : t <- inter_types, d <- declarable_types(t)];
    indirect_decl_types  = [
      d : n <- named_types,
          t = named_interface_types_defs(n, !!),
          u = strip_tags(t),
          d <- declarable_types(t),
          d != u // This is rather confusing...
    ];
    return named_types & direct_decl_types & indirect_decl_types;
  }


  // Whether a declared type can be mapped directly to some simpler type
  // if it does not appear inside a type union
  ## FIND A BETTER NAME FOR THIS
  Bool is_simplifiable(DeclInterType inter_type) {
    return is_so(inter_type);

    Bool is_so(<SymbolInterType, TupleInterType, RecordInterType, UnionInterType>) = false;

    Bool is_so(NamedInterType inter_type) = is_so(named_interface_types_defs(inter_type, !!));

    Bool is_so(TaggedInterType inter_type) =
      match (strip_tags(inter_type))
        bool      |
        integer   |
        float     |
        string    |
        seq()     |
        set()     |
        generic   = true,
        _         = false;
  }


  // Child/parent relationships between declared types
  [DeclInterType] decl_types_parents(DeclInterType child) {
    return [p : p <- child_parent(child, ?)];

    [DeclInterType, DeclInterType] child_parent = [c, t : t <- declared_types, c <- children(t)];

    [UnionAltInterType] children(InterType type) =
      union(ts?)    = ts,
      named(_)      = if named_interface_types_defs(type, *)
                        then children(named_interface_types_defs(type, !!))
                        else [],
      tagged(_, t?) = if in(t, declared_types) then [] else children(t),
      _             = [];
  }


  // Names of the declared interface types when passing data from the host language to Cell
  [DeclInterType -> String] input_types_names {
    taken_names = []; ## IMPLEMENT IMPLEMENT IMPLEMENT
    return interface_type_names(declared_types, direction = :in, taken_names = taken_names);
  }


  // Declaration of the interface types in the host language -> Cell direction
  [DeclInterType -> String*] input_types_decls = [
    t -> type_decl(t, input_types_names, :in) : t, s <- input_types_names
  ];


  // Names of the declared interface types when passing data from Cell to the host language
  [DeclInterType -> String] output_types_names {
    taken_names = []; ## IMPLEMENT IMPLEMENT IMPLEMENT

    names = interface_type_names(declared_types, direction = :out, taken_names = taken_names);
    decls = [t -> type_decl(t, names, :out) : t, unused_var <- names];

    loop {
      conflicts = union([{
          in_name  = input_types_names(t, !!);
          out_name = names(t, !!);
          in_decl  = input_types_decls(t, !!);
          out_decl = decls(t, !!);
          return [t if in_name == out_name and in_decl != out_decl];
        } : t <- declared_types
      ]);

      return names if conflicts == [];

      taken_names = taken_names & [input_types_names(t, !!) : t <- conflicts];
      names = interface_type_names(declared_types, direction = :out, taken_names = taken_names);
    }
  }


  // Declaration of the interface types in the Cell -> host language direction
  [DeclInterType -> String*] output_types_decls {
    return [t -> type_decl(t, output_types_names, :out) : t, s <- output_types_names];
  }


  // Input types documentation
  [DeclInterType -> String*] input_types_docs = [
    t -> type_docs(t, input_types_names, :in) : t, unused_var <- input_types_names
  ];


  // Output types documentation
  [DeclInterType -> String*] output_types_docs = [
    t -> type_docs(t, output_types_names, :out) : t, unused_var <- output_types_names
  ];


  // Interface type declarations, for both input and output
  [String -> String*] interface_types_decls {
    header = ("package net.cell_lang;", "");
    input_types = [
      input_types_names(inter_type, !!) & ".java" -> header & decl
      : inter_type, decl <- input_types_decls
    ];
    output_types = [
      output_types_names(inter_type, !!) & ".java" -> header & decl
      : inter_type, decl <- output_types_decls
    ];
    return input_types & output_types;
  }


  // Documentation for the generated types, for both input and output
  [String*] interface_types_docs = values(input_types_docs) & values(output_types_docs);
}


// Names of the conversion functions for both input and output types
String decl_type_import_funct_name(String name) = "import_" & name;
String decl_type_export_funct_name(String name) = "export_" & name;


[DeclInterType] declarable_types(InterType inter_type) =
  bool            |
  integer         |
  float           |
  string          |
  generic         = [],
  symbol()        = [inter_type],
  tuple(ts?)      = [inter_type] & union([declarable_types(t) : t <~ ts]),
  record(fs?)     = [inter_type] & union([declarable_types(t) : l, t <- fs]),
  seq(t?)         |
  set(t?)         = declarable_types(t),
  // bin_rel(ts?)    |
  // tern_rel(ts?)   = union([declarable_types(t) : t <~ ts]),
  tagged()        = declarable_types(strip_tags(inter_type)),
  named()         = [inter_type],
  union(ts?)      = [inter_type] & ts & [d : t <- ts, d <- declarable_types(t), d != strip_tags(t)];

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit prg : CompiledPrg, taken_names : [String], direction : <in, out> {
  [DeclInterType -> String] interface_type_names([DeclInterType] decl_types) {
    type_names = [t -> safe_class_name(t, false, nothing) : t <- decl_types];

    // If there are conflicts, the first option is to use the "try harder" flag
    conflicts = non_injective_keys_by_value(type_names);
    if conflicts != [] {
      for type_group <- isort(conflicts) {
        renamed_types = [t -> safe_class_name(t, true, nothing) : t <- type_group];
        if non_injective_keys(renamed_types) == []
          type_names = [t -> lookup(renamed_types, t, type_names(t, !!)) : t <- decl_types];
      }
    }

    loop {
      conflicts = non_injective_keys_by_value(type_names);
      break if conflicts == [];
      renamed_types = [t -> safe_class_name(t, false, just(i)) : ts <- conflicts, t @ i <~ isort(ts)];
      type_names = [t -> lookup(renamed_types, t, type_names(t, !!)) : t <- decl_types];

      ## THIS IS JUST A CHECK THAT HAS TO BE REMOVED
      assert {
        rem_conflicts = non_injective_keys_by_value(type_names);
        if rem_conflicts != [] {
          print "Found conflict after first iteraction of renaming:";
          print rem_conflicts;
        }
        return true;
      };
    }
    return type_names;
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit prg : CompiledPrg {
  String* type_decl(DeclInterType type, [DeclInterType -> String] types_names, <in, out> direction) =
    type_decl_or_doc(type, types_names = types_names, direction = direction, doc_only = false, root_type = type);

  String* type_docs(DeclInterType type, [DeclInterType -> String] types_names, <in, out> direction) =
    type_decl_or_doc(type, types_names = types_names, direction = direction, doc_only = true, root_type = type);
}


implicit prg : CompiledPrg, types_names : [DeclInterType -> String], direction : <in, out>,
         doc_only : Bool, root_type : DeclInterType {

  String* type_decl_or_doc(TupleInterType type) {
    types = match (direction)
      in  = (input_arg_type(t) : t @ i <- untag(type)),
      out = (return_value_type(t, types_names) : t @ i <- untag(type));
    max_len = max((length(t) : t <- types));
    spaces = (string((ascii_space : i < max_len - length(t))) : t <- types);
    body = ({if doc_only then "" else "public "} & t & spaces(i) & " item" & printed(i+1) & ";" : t @ i <- types);
    body = body & to_string_method if not doc_only;
    header = {if doc_only then "" else "public "} & "class " & name_and_parents_decl(false) & " {";
    return (header) & indent_lines(body) & ("}");
  }


  String* type_decl_or_doc(RecordInterType type) {
    fields = match (direction)
      in  = [l -> input_arg_type(t) : l, t <- untag(type)],
      out = [l -> return_value_type(t, types_names) : l, t <- untag(type)];
    field_names = java_adjusted_unambiguous_lower_camel_case_names(keys(fields));
    max_len = max([length(t) : unused_var, t <- fields]);
    body = ({
        spaces = string((ascii_space : unused_var < max_len - length(t)));
        return {if doc_only then "" else "public "} & t & spaces & " " & field_names(l, !!) & ";";
      } : l, t <- isort(fields)
    );
    body = body & to_string_method if not doc_only;
    header = {if doc_only then "" else "public "} & "class " & name_and_parents_decl(false) & " {";
    return (header) & indent_lines(body) & ("}");
  }


  String* type_decl_or_doc(NamedInterType type) = type_decl_or_doc(named_interface_types_defs(type, !!));


  String* type_decl_or_doc(TaggedInterType type) {
    untagged = untagged_type(type);
    if untagged :: <NamedInterType, UnionInterType> and in(untagged, declared_types) {
      body = ({if doc_only then "" else "public "} & types_names(untagged, !!) & " value;");
      body = body & to_string_method if not doc_only;
      first_line = {if doc_only then "" else "public "} & "class " & name_and_parents_decl(false) & " {";
      return (first_line) & indent_lines(body) & ("}");
    }
    else {
      return untagged_type_decl_or_doc(untagged);
    }


    String* untagged_type_decl_or_doc(DeclInterType inter_type) = type_decl_or_doc(inter_type);


    String* untagged_type_decl_or_doc(<BasicInterType, CollInterType> inter_type) {
      type_name = match (direction)
        in  = input_arg_type(inter_type),
        out = return_value_type(inter_type, types_names);
      body = ({if doc_only then "" else "public "} & type_name & " value;");
      body = body & to_string_method if not doc_only;
      header = {if doc_only then "" else "public "} & "class " & name_and_parents_decl(false) & " {";
      return (header) & indent_lines(body) & ("}");
    }
  }


  String* type_decl_or_doc(UnionInterType type) = (
    "interface " & name_and_parents_decl(true) & " {",
    "",
    "}"
  );


  String* type_decl_or_doc(SymbolInterType type) {
    type_name = types_names(root_type, !!);
    if doc_only {
      return (
        "class " & name_and_parents_decl(false) & " {",
        "  final static " & type_name & " singleton;",
        "}"
      );
    }
    else {
      return (
        "public class " & name_and_parents_decl(false) & " {",
        "  private " & type_name & "() {}",
        "",
        "  public final static " & type_name & " singleton = new " & type_name & "();",
        "",
        "  public String toString() {",
        "    return \"" & printed(symbol(type)) & "\";",
        "  }",
        "}"
      );
    }
  }


  String name_and_parents_decl(Bool is_interface) {
    text = types_names(root_type, !!);
    parents = decl_types_parents(root_type);
    keyword = if is_interface then " extends " else " implements ";
    text = text & keyword & append((types_names(p, !!) : p <- isort(parents)), ", ") if parents != [];
    return text;
  }


  String* to_string_method = (
    "",
    "public String toString() {",
    "  return Generated." & decl_type_import_funct_name(types_names(root_type, !!)) & "(this).toString();",
    "}"
  );
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit prg : CompiledPrg {
  String* decl_type_import_functions(DeclInterType inter_type) {
    type_name = input_types_names(inter_type, !!);
    type_def = match (inter_type)
      named()   = named_interface_types_defs(inter_type, !!),
      _         = inter_type;
    body = decl_type_import_code(type_def, "obj", "return ", treat_generic_as_value = false);
    sign_line = "static Obj " & decl_type_import_funct_name(type_name) & "(" & type_name & " obj) {";
    code = (sign_line) & indent_lines(body) & ("}");
    out_type_name = output_types_names(inter_type, !!);
    if out_type_name != type_name {
      out_body = decl_type_import_code(type_def, "obj", "return ", treat_generic_as_value = true);
      out_fn_name = decl_type_import_funct_name(out_type_name);
      out_sign_line = "static Obj " & out_fn_name & "(" & out_type_name & " obj) {";
      code = code & ("", out_sign_line) & indent_lines(out_body) & ("}");
    }
    return code;
  }


  String* decl_type_export_function(DeclInterType inter_type) {
    type_name = output_types_names(inter_type, !!);
    fn_name = decl_type_export_funct_name(type_name);
    type_def = match (inter_type)
      named()   = named_interface_types_defs(inter_type, !!),
      _         = inter_type;
    code = export_code(type_def, type_name, "obj", "return ");
    sign_line = "static " & type_name & " " & fn_name & "(Obj obj) {";
    return (sign_line) & indent_lines(code) & ("}");
  }
}

////////////////////////////////////////////////////////////////////////////////

[Symbol -> String] java_adjusted_unambiguous_lower_camel_case_names([Symbol] symbols) {
  nice_field_names = [s -> safe_lower_camel_case(s, false) : s <- symbols];
  conflicting_names = duplicate_values(nice_field_names);
  return [
    l -> if conflicting_names(n) then safe_lower_camel_case(l, true) else n
    : l, n <- nice_field_names
  ];
}

////////////////////////////////////////////////////////////////////////////////

InterType strip_tags(InterType type) =
  tagged(_, t?) = strip_tags(t),
  _             = type;

////////////////////////////////////////////////////////////////////////////////

[V] duplicate_values([K -> V] map) = duplicates((v : unused_var, v <- isort(map)));

[K] non_injective_keys([K -> V] map) {
  dup_vals = duplicate_values(map);
  return [k : k, v <- map, dup_vals(v)];
}

[K -> V] remove_non_injective_keys([K -> V] map) {
  keys_to_remove = non_injective_keys(map);
  return [k -> v : k, v <- map, not keys_to_remove(k)];
}

[[+K]] non_injective_keys_by_value([K -> V] map) =
  values(group_by(non_injective_keys(map), map($, !!)));
