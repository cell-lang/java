////////////////////////////////////////////////////////////////////////////////
/////////////// Code shared between static and reactive automata ///////////////
////////////////////////////////////////////////////////////////////////////////

implicit prg : CompiledPrg, typedefs : [TypeName -> NeType] {
  (String*, String*) method_wrapper(MethodId method_id, <CompiledMethod, OptCompMethod> method,
    <AutoSymbol, DBSymbol> block_name, String ext_name, String class_name,
    String method_path, Bool is_gen_memb_tester) {
    args_inter_types = (interface_type(t) : t <- method.args_types);
    inter_ret_type = interface_type(method.ret_type);

    input_args_types = (input_arg_type(it) : it <- args_inter_types);
    args_types_str = append(input_args_types, ", ");
    args_decls = append((it & " arg" & printed(i) : it @ i <- input_args_types), ", ");

    ret_val_str = return_value_type(inter_ret_type);

    arity = |method.args_types|;
    memb_preds = method.args_memb_preds;
    args_types_by_pos = ([ps(i) : ps <- memb_preds] : i < arity);
    mono_args = ((i, only(ts)) : ts @ i <- args_types_by_pos, |ts| == 1);
    poly_args = isort([i : ts @ i <~ args_types_by_pos, |ts| != 1]);

    code = (
      "",
      "public " & ret_val_str & " " & ext_name & "(" & args_decls & ") {"
    );

    code = (code | "  Obj " & append(("objArg" & printed(i) : i < arity), ", ") & ";", "") if arity > 0;

    code = code & join((
      indent_lines(import_code(it, "arg" & printed(i), "objArg" & printed(i) & " = "))
      : it @ i <- args_inter_types
    ));

    conds = ("Generated." & native_fn_name(p) & "(objArg" & printed(i) & ")" : i, p <- mono_args);
    if poly_args != () {
      poly_conds = ((
        "Generated." & native_fn_name(ps(i)) & "(objArg" & printed(i) & ")" : i <- poly_args
        ) : ps <- isort(memb_preds)
      );
      anded_conds = ({
          c = append(cs, " && ");
          c = "(" & c & ")" if |cs| > 1;
          return c;
        } : cs <- poly_conds
      );
      poly_cond = append(anded_conds, " || ");
      poly_cond = "(" & poly_cond & ")" if |anded_conds| > 1;
      conds = (conds | poly_cond);
    }
    cond = append(conds, " && ");
    cond = "(" & cond & ")" if |conds| > 1;

    code = code & (
      "  if (!" & cond & ")",
      if is_gen_memb_tester
        then "    return false;"
        else "    throw new RuntimeException(\"Invalid argument type\");"
    ) if cond != "";

    full_method_name = method_path & user_def_method_name(block_name, method_id);

    code = code & (
      "  try {",
      "    Obj resObj = " & method_call(method, full_method_name) & ";"
      ) & indent_lines(indent_lines(
        export_code(inter_ret_type, "resObj", "return ")
      )) & (
      "  }",
      "  catch (Exception e) {",
      "    env = new Generated.Env();",
      "    throw e;",
      "  }",
      "}"
    );

    docs = ret_val_str & " " & ext_name & "(" & args_types_str & ");";

    return (code, (docs));
  }
}


String method_call(CompiledMethod method, String method_name) {
  args = ("objArg" & printed(i) : i < |method.args_types|);
  return method_name & "(" & append((args | "env"), ", ") & ")";
}


String method_call(OptCompMethod method, String method_name) {
  converted_args = (obj_to_repr(low_level_repr(a), "objArg" & printed(i)) : a @ i <- method.args);
  pre_call = method_name & "(" & append((converted_args | "env"), ", ") & ")";
  return repr_to_obj(method.ret_val_repr, pre_call);
}


String obj_to_repr(AnyLowLevelRepr repr, String expr) =
  bool                = expr & ".getBool()",
  int                 = expr & ".getLong()",
  float               = expr & ".getDouble()",
  symbol              |
  array()             |
  object              = expr,
  opt_tag_rec_repr()  = "(" & opt_tag_rec_name(repr.tag, repr.index, context=:wrapper) & ") " & expr;


String repr_to_obj(AnyLowLevelRepr repr, String expr) =
  bool                = "SymbObj.get(" & expr & ")",
  int                 = "IntObj.get("  & expr & ")",
  float               = "new FloatObj(" & expr & ")",
  symbol              |
  array()             |
  object              |
  opt_tag_rec_repr()  = expr;
