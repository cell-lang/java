type SimplyNamedInterType = BasicInterType, TaggedInterType[<generic>], named(type_symbol(Symbol));

type DeclInterType  = SymbolInterType, TupleInterType, RecordInterType, NamedInterType, UnionInterType,
                      TaggedInterType[UnionableInterType];


implicit typedefs : [TypeName -> NeType] {
  ( [InterType -> String], [InterType -> String],
    [NamedInterType -> String], [NamedInterType -> String],
    [String*], [String*]
  ) declared_types([NeType] types) {
    named_types = named_interface_types(types);
    inter_types = [interface_type(t) : t <- types] & values(named_types);
    decl_types = union([types_to_declare(t) : t <- inter_types]);

    child_parent = [c, t : t <- decl_types, c <- children(t, named_types)];
    parents = [c -> [p : p <- child_parent(c, ?)] : c, unused_var <- child_parent];

    reserved_names = []; ## IMPLEMENT
    let reserved_names = reserved_names:
      types_names_input  = interface_type_names(decl_types, host_to_cell = true);
      types_names_output = interface_type_names(decl_types, host_to_cell = false);
    ;

    named_type_import_function = [n -> "import" & types_names_input(n, !!)  : n, unused_var <- named_types];
    named_type_export_function = [n -> "export" & types_names_output(n, !!) : n, unused_var <- named_types];

    let input_types_names = types_names_input, named_type_import_function = named_type_import_function,
        output_types_names = types_names_output, named_type_export_function = named_type_export_function,
        parents = parents:
      input_types_decls  = [t -> type_decl(t, host_to_cell = true)  : t, s <- types_names_input];
      output_types_decls = [t -> type_decl(t, host_to_cell = false) : t, s <- types_names_output];
    ;

    loop
      conflicts = union([{
          in_name  = types_names_input(t, !!);
          out_name = types_names_output(t, !!);
          in_decl  = input_types_decls(t, !!);
          out_decl = output_types_decls(t, !!);
          return [t if in_name == out_name and in_decl != out_decl];
        } : t <- decl_types
      ]);

      break if conflicts == [];

      reserved_names = reserved_names & [types_names_input(t, !!) : t <- conflicts];
      let reserved_names = reserved_names:
        types_names_output = interface_type_names(decl_types, host_to_cell = false);
      ;
      named_type_export_function = [n -> types_names_output(n, !!) : n, unused_var <- named_types];

      let input_types_names = types_names_input, named_type_import_function = named_type_import_function,
          output_types_names = types_names_output, named_type_export_function = named_type_export_function,
          parents = parents, host_to_cell = false:
        output_types_decls = [t -> type_decl(t) : t, s <- types_names_output];
      ;
    ;

    let input_types_names = types_names_input, named_type_import_function = named_type_import_function,
        output_types_names = types_names_output, named_type_export_function = named_type_export_function,
        parents = parents:
      input_types_docs  = [t -> type_docs(t, host_to_cell = true)  : t, s <- types_names_input];
      output_types_docs = [t -> type_docs(t, host_to_cell = false) : t, s <- types_names_output];
    ;

    type_decls = values(input_types_decls) & values(output_types_decls);
    type_docs  = values(input_types_docs)  & values(output_types_docs);

    return (
      types_names_input, types_names_output,
      named_type_import_function, named_type_export_function,
      type_decls, type_docs
    );
  }


  [UnionAltInterType] children(<DeclInterType, NameableInterType> type,
      [NamedInterType -> NameableInterType] named_types) =
    union(ts?)  = ts,
    named(_)    = if named_types(type, *) then children(named_types(type, !!), named_types) else [],
    _           = [];


  [DeclInterType] types_to_declare(InterType inter_type) =
    bool            |
    integer         |
    float           |
    symbol          |
    string          |
    generic         = [],
    symbol()        = [inter_type],
    tuple(ts?)      = [inter_type] & union([types_to_declare(t) : t <~ ts]),
    record(fs?)     = [inter_type] & union([types_to_declare(t) : l, t <- fs]),
    seq(t?)         |
    set(t?)         = types_to_declare(t),
    bin_rel(ts?)    |
    tern_rel(ts?)   = union([types_to_declare(t) : t <~ ts]),
    tagged(_, t?)   = types_to_declare(t),
    named()         = [inter_type],
    union(ts?)      = [inter_type] & ts & #(union([types_to_declare(t) : t <- ts]) - [strip_tags(t) : t <- ts]);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit host_to_cell : Bool, reserved_names : [String] {
  [DeclInterType -> String] interface_type_names([DeclInterType] decl_types) {
    type_names = [t -> safe_name(t, nothing) : t <- decl_types];
    loop
      conflicts = non_injective_keys_by_value(type_names);
      break if conflicts == [];
      renamed_types = [t -> safe_name(t, just(i)) : ts <- conflicts, t @ i <~ isort(ts)];
      type_names = [t -> lookup(renamed_types, t, type_names(t, !!)) : t <- decl_types];

      ## THIS IS JUST A CHECK THAT HAS TO BE REMOVED
      assert {
        rem_conflicts = non_injective_keys_by_value(type_names);
        if rem_conflicts != []:
          print "Found conflict after first iteraction of renaming:";
          print rem_conflicts;
        ;
        return true;
      };
    ;
    return type_names;
  }


  String safe_name(TupleInterType type, Maybe[Nat] unique_id) {
    suffix = if unique_id != nothing then "_" & printed(value(unique_id)) else "";
    field_types = untag(type);
    name = if field_types :: SimplyNamedInterType+
      then append((field_type_name(t) : t <- field_types), "_")
      else "Tuple";
    return non_reserved_name(name & suffix);

    String field_type_name(SimplyNamedInterType) =
      bool                = "Bool",
      integer             = "Long",
      float               = "Double",
      symbol              = "Symbol",
      string              = "String",
      generic             |
      tagged(_, generic)  = if host_to_cell then "String" else "Value",
      named(ts?)          = upper_camel_case(match(ts) type_symbol(s?) = s);
  }


  String safe_name(SymbolInterType type, Maybe[Nat] unique_id) {
    suffix = if unique_id != nothing then "_" & printed(value(unique_id)) else "";
    base_name = upper_camel_case(untag(type));
    return non_reserved_name(base_name & suffix);
  }


  String safe_name(RecordInterType type, Maybe[Nat] unique_id) {
    suffix = if unique_id != nothing then "_" & printed(value(unique_id)) else "";
    field_labels = isort(keys(untag(type)));
    base_name = append((upper_camel_case(l) : l <- field_labels), "_");
    return non_reserved_name(base_name & suffix);
  }


  String safe_name(NamedInterType type, Maybe[Nat] unique_id) {
    suffix = if unique_id != nothing then "_" & printed(value(unique_id)) else "";
    type_symb = match (type) named(s?) = s;
    return non_reserved_name(upper_camel_case(type_symb) & suffix);
  }


  String safe_name(TaggedInterType[UnionableInterType] type, Maybe[Nat] unique_id) {
    suffix = if unique_id != nothing then "_" & printed(value(unique_id)) else "";
    tag = match (type) tagged(s?, _) = s;
    return non_reserved_name(upper_camel_case(tag) & suffix);
  }


  String safe_name(UnionInterType type, Maybe[Nat] unique_id) {
    suffix = if unique_id != nothing then "_" & printed(value(unique_id)) else "";
    return non_reserved_name("TypeUnion" & suffix);
  }


  String non_reserved_name(String unsafe_name) {
    name = unsafe_name;
    while reserved_names(name):
      name = "_" & name;
    ;
    return name;
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit input_types_names : [InterType -> String], output_types_names : [InterType -> String],
         named_type_import_function : [NamedInterType -> String],
         named_type_export_function : [NamedInterType -> String],
         host_to_cell : Bool, parents : [InterType -> [InterType]]
{
  String* type_decl(DeclInterType type) = type_decl(type, false, root_type = type);

  String* type_docs(DeclInterType type) = type_decl(type, true, root_type = type);
}


implicit input_types_names : [InterType -> String], output_types_names : [InterType -> String],
         named_type_import_function : [NamedInterType -> String],
         named_type_export_function : [NamedInterType -> String],
         host_to_cell : Bool, parents : [InterType -> [InterType]], root_type : DeclInterType
{
  String* type_decl(TupleInterType type, Bool doc_only) {
    types = (if host_to_cell then input_arg_type(t) else return_value_type(t) : t @ i <- untag(type));
    max_len = max((length(t) : t <- types));
    spaces = (string((ascii_space : i < max_len - length(t))) : t <- types);
    body = ("  public " & t & spaces(i) & " item" & printed(i) & ";" : t @ i <- types);
    header = #(if doc_only then "" else "public static ") & "class " & name_and_parents_decl & " {";
    return (header) & body & ("}");
  }


  String* type_decl(RecordInterType type, Bool doc_only) {
    fields = [l -> if host_to_cell then input_arg_type(t) else return_value_type(t) : l, t <- untag(type)];
    field_names = java_adjusted_unambiguous_lower_camel_case_names(keys(fields));
    max_len = max([length(t) : unused_var, t <- fields]);
    body = ({
        spaces = string((ascii_space : unused_var < max_len - length(t)));
        return "  public " & t & spaces & " " & field_names(l, !!) & ";";
      } : l, t <- isort(fields)
    );
    header = #(if doc_only then "" else "public static ") & "class " & name_and_parents_decl & " {";
    return (header) & body & ("}");
  }


  String* type_decl(NamedInterType type, Bool doc_only) {
    return match (type)
      named(_, t?) = nameable_type_decl(t, doc_only);

    String* nameable_type_decl(<TupleInterType, RecordInterType, UnionInterType> type, Bool doc_only) =
      type_decl(type, doc_only);

    String* nameable_type_decl(TaggedInterType[NameableInterType] type, Bool doc_only) =
      tagged(_, t?) = nameable_type_decl(t, doc_only);
  }


  String* type_decl(TaggedInterType[UnionableInterType] type, Bool doc_only) {
    return match (type)
      tagged(_, t?) = type_decl(t, doc_only);
  }


  String* type_decl(UnionInterType type, Bool doc_only) = (
    "interface " & name_and_parents_decl & " {",
    "",
    "}"
  );


  String* type_decl(SymbolInterType type, Bool doc_only) {
    first_line = #(if doc_only then "" else "public static ") & "class " & name_and_parents_decl & " {";
    body = (
      type_name & "() {",
      "",
      "}",
      "",
      "static " & type_name & " singleton = new " & type_name & "();",
      "",
      "public static " & type_name & " singleton() {",
      "  return singleton;",
      "}"
    );
    return (first_line) & #(if doc_only then ("") else indent_lines(body)) & ("}");
  }


  String type_name {
    types_names = if host_to_cell then input_types_names else output_types_names;
    return types_names(root_type, !!);
  }


  String name_and_parents_decl {
    types_names = if host_to_cell then input_types_names else output_types_names;
    text = types_names(root_type, !!);
    if parents(root_type, *):
      text = text & " implements " & append((types_names(p, !!) : p <- isort(parents(root_type, !!))), ", ");
    ;
    return text;
  }
}


[Symbol -> String] java_adjusted_unambiguous_lower_camel_case_names([Symbol] symbols) {
  nice_field_names = [s -> safe_lower_camel_case(s, false) : s <- symbols];
  conflicting_names = duplicate_values(nice_field_names);
  return [
    l -> if conflicting_names(n) then safe_lower_camel_case(l, true) else n
    : l, n <- nice_field_names
  ];
}

////////////////////////////////////////////////////////////////////////////////

[InterType -> String] java_type_names([NamedInterType] types) = [
  ## THIS SHOULD ALSO RESOLVE CONFLICTS WITH OTHER UPPER CAMEL CASE NAMES
  t -> upper_camel_case(s) : type <- types, named(s?, t?) ?= type
];


String safe_lower_camel_case(Symbol symb) = safe_lower_camel_case(symb, false);


String safe_lower_camel_case(Symbol symb, Bool keep_underscore) {
  name = lower_camel_case(symb);
  name = "_" & name if is_reserved(name);
  return name;
}

String safe_lower_camel_case_chain(Symbol+ symbs) {
  name = append((lower_camel_case(s) : s <- symbs), "_");
  name = "_" & name if is_reserved(name);
  return name;
}

////////////////////////////////////////////////////////////////////////////////

InterType strip_tags(InterType type) =
  tagged(_, t?) = strip_tags(t),
  _             = type;

////////////////////////////////////////////////////////////////////////////////

[V] duplicate_values([K -> V] map) = duplicates((v : unused_var, v <- isort(map)));

[K] non_injective_keys([K -> V] map) {
  dup_vals = duplicate_values(map);
  return [k : k, v <- map, dup_vals(v)];
}

[K -> V] remove_non_injective_keys([K -> V] map) {
  keys_to_remove = non_injective_keys(map);
  return [k -> v : k, v <- map, not keys_to_remove(k)];
}

[[+K]] non_injective_keys_by_value([K -> V] map) =
  values(group_by(non_injective_keys(map), map($, !!)));
