type SimplyNamedInterType = BasicInterType, TaggedInterType[<generic>], named(type_symbol(Symbol));

type DeclInterType  = SymbolInterType, TupleInterType, RecordInterType, NamedInterType,
                      UnionInterType, TaggedInterType[DeclInterType];


implicit prg : CompiledPrg {
  // Types used at the boundary between generated and host code
  [NeType] boundary_types {
    react_blocks_types = [t : b <- prg.react_blocks, t <- interface_types(b)];
    static_blocks_map = [b.name -> b : b <- prg.static_blocks];
    static_blocks_types = [t : b <- prg.static_blocks, t <- interface_types(b, static_blocks_map)];
    return react_blocks_types & static_blocks_types;
  }


  // Types with a user-defined name that need to be declared, and their corresponding definitions
  [TypeSymbol] named_interface_types {
    let typedefs = prg.typedefs:
      // Retrieving all type symbols that are referenced either directly or indirectly
      type_symbs = reachable_type_symbols(boundary_types);
      // Filtering out the type symbols that do not correspond to a nameable type
      type_symbs = [ts : ts <- type_symbs, is_nameable(cast_ne_type(expand_type_ref(ts, typedefs)))];
    ;
    return type_symbs;
  }


  // Types with a user-defined name that need to be declared, and their corresponding definitions
  [NamedInterType -> DeclInterType] named_interface_types_defs {
    let typedefs = prg.typedefs:
      // Mapping each type name to its corresponding interface type
      inter_type_defs = [
        :named(ts) -> {
          exp_type = expand_top_level_type_refs(cast_ne_type(expand_type_ref(ts, typedefs)));
          inter_type = interface_type(exp_type);
          assert inter_type :: DeclInterType;
          fail if not inter_type :: DeclInterType;
          return inter_type;
        } : ts <- named_interface_types
      ];
    ;
    return inter_type_defs;
  }


  // Types that need to be declared
  [DeclInterType] declared_types {
    let typedefs = prg.typedefs:
      inter_types = [interface_type(t) : t <- boundary_types];
    ;
    named_types = [n : t <- inter_types, n <- nested_named_types(t)];
    loop
      new_inter_types = [named_interface_types_defs(t, !!) : t <- named_types];
      new_named_types = [n : t <- new_inter_types, n <- nested_named_types(t)] - named_types;
      break if new_named_types == [];
      named_types = named_types & new_named_types;
    ;
    direct_decl_types = [d : t <- inter_types, d <- declarable_types(t)];
    indirect_decl_types  = [
      d : n <- named_types,
          t = named_interface_types_defs(n, !!),
          u = strip_tags(t),
          d <- declarable_types(t),
          d != u
    ];

print "-- -- -- -- -- -- -- -- -- -- -- -- -- -- --";
print "boundary_types";
print boundary_types;
print "inter_types";
print inter_types;
print "named_types";
print named_types;
print "direct_decl_types";
print direct_decl_types;
print "indirect_decl_types";
print indirect_decl_types;
print "-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -";

    return named_types & direct_decl_types & indirect_decl_types;
  }


  // Child/parent relationships between declared types
  [DeclInterType] decl_types_parents(DeclInterType child) {
    return [p : p <- child_parent(child, ?)];

    [DeclInterType, DeclInterType] child_parent = [c, t : t <- declared_types, c <- children(t)];

    [UnionAltInterType] children(DeclInterType type) =
      union(ts?)    = ts,
      named(_)      = if named_interface_types_defs(type, *)
                        then children(named_interface_types_defs(type, !!))
                        else [],
      tagged(_, t?) = if in(t, declared_types) then [] else children(t),
      _             = [];
  }


  // Names of the declared interface types when passing data from the host language to Cell
  [DeclInterType -> String] input_types_names {
    reserved_names = []; ## IMPLEMENT IMPLEMENT IMPLEMENT
    return interface_type_names(declared_types, direction = :in, reserved_names = reserved_names);
  }


  // Declaration of the interface types in the host language -> Cell direction
  [DeclInterType -> String*] input_types_decls = [
    t -> type_decl(t, input_types_names, :in) : t, s <- input_types_names
  ];


  // Names of the declared interface types when passing data from Cell to the host language
  [DeclInterType -> String] output_types_names {
    reserved_names = []; ## IMPLEMENT IMPLEMENT IMPLEMENT

    names = interface_type_names(declared_types, direction = :out, reserved_names = reserved_names);
    decls = [t -> type_decl(t, names, :out) : t, unused_var <- names];

    loop
      conflicts = union([{
          in_name  = input_types_names(t, !!);
          out_name = names(t, !!);
          in_decl  = input_types_decls(t, !!);
          out_decl = decls(t, !!);
          return [t if in_name == out_name and in_decl != out_decl];
        } : t <- declared_types
      ]);

      return names if conflicts == [];

      reserved_names = reserved_names & [input_types_names(t, !!) : t <- conflicts];
      names = interface_type_names(declared_types, direction = :out, reserved_names = reserved_names);
    ;
  }


  // Declaration of the interface types in the Cell -> host language direction
  [DeclInterType -> String*] output_types_decls {
    return [t -> type_decl(t, output_types_names, :out) : t, s <- output_types_names];
  }


  // Input types documentation
  [DeclInterType -> String*] input_types_docs {
    let direction = :in:
      docs = [t -> type_docs(t, input_types_names, :in) : t, unused_var <- input_types_names];
    ;
    return docs;
  }


  // Output types documentation
  [DeclInterType -> String*] output_types_docs {
    let direction = :out:
      docs = [t -> type_docs(t, output_types_names, :out) : t, unused_var <- output_types_names];
    ;
    return docs;
  }


  // Interface type declarations, for both input and output
  [String*] interface_types_decls = values(input_types_decls) & values(output_types_decls);


  // Documentation for the generated types, for both input and output
  [String*] interface_types_docs = values(input_types_docs) & values(output_types_docs);


  // Names of the conversion functions for both input and output types
  String decl_type_import_funct_name(DeclInterType it) = "import" & input_types_names(it, !!);
  String decl_type_export_funct_name(DeclInterType it) = "export" & output_types_names(it, !!);
}


[DeclInterType] declarable_types(InterType inter_type) =
  bool            |
  integer         |
  float           |
  symbol          |
  string          |
  generic         = [],
  symbol()        = [inter_type],
  tuple(ts?)      = [inter_type] & union([declarable_types(t) : t <~ ts]),
  record(fs?)     = [inter_type] & union([declarable_types(t) : l, t <- fs]),
  seq(t?)         |
  set(t?)         = declarable_types(t),
  bin_rel(ts?)    |
  tern_rel(ts?)   = union([declarable_types(t) : t <~ ts]),
  tagged()        = declarable_types(strip_tags(inter_type)),
  named()         = [inter_type],
  union(ts?)      = [inter_type] & ts & [d : t <- ts, d <- declarable_types(t), d != strip_tags(t)];

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit reserved_names : [String], direction : <in, out> {
  [DeclInterType -> String] interface_type_names([DeclInterType] decl_types) {
    type_names = [t -> safe_name(t, nothing) : t <- decl_types];
    loop
      conflicts = non_injective_keys_by_value(type_names);
      break if conflicts == [];
      renamed_types = [t -> safe_name(t, just(i)) : ts <- conflicts, t @ i <~ isort(ts)];
      type_names = [t -> lookup(renamed_types, t, type_names(t, !!)) : t <- decl_types];

      ## THIS IS JUST A CHECK THAT HAS TO BE REMOVED
      assert {
        rem_conflicts = non_injective_keys_by_value(type_names);
        if rem_conflicts != []:
          print "Found conflict after first iteraction of renaming:";
          print rem_conflicts;
        ;
        return true;
      };
    ;
    return type_names;
  }


  String safe_name(TupleInterType type, Maybe[Nat] unique_id) {
    suffix = if unique_id != nothing then "_" & printed(value(unique_id)) else "";
    field_types = untag(type);
    name = if field_types :: SimplyNamedInterType+
      then append((field_type_name(t) : t <- field_types), "_")
      else "Tuple";
    return non_reserved_name(name & suffix);

    String field_type_name(SimplyNamedInterType) =
      bool                = "Bool",
      integer             = "Long",
      float               = "Double",
      symbol              = "Symbol",
      string              = "String",
      generic             |
      tagged(_, generic)  = if direction == :in then "String" else "Value",
      named(ts?)          = upper_camel_case(match(ts) type_symbol(s?) = s);
  }


  String safe_name(SymbolInterType type, Maybe[Nat] unique_id) {
    suffix = if unique_id != nothing then "_" & printed(value(unique_id)) else "";
    base_name = upper_camel_case(untag(type));
    return non_reserved_name(base_name & suffix);
  }


  String safe_name(RecordInterType type, Maybe[Nat] unique_id) {
    suffix = if unique_id != nothing then "_" & printed(value(unique_id)) else "";
    field_labels = isort(keys(untag(type)));
    base_name = append((upper_camel_case(l) : l <- field_labels), "_");
    return non_reserved_name(base_name & suffix);
  }


  String safe_name(NamedInterType type, Maybe[Nat] unique_id) {
    suffix = if unique_id != nothing then "_" & printed(value(unique_id)) else "";
    return non_reserved_name(base_name(type_symb(type)) & suffix);


    String base_name(BasicTypeSymbol) =
      type_symbol(s?)         |
      schema_type_symbol(s?)  = upper_camel_case(s),
      builtin_type_symbol()   = undefined;

    String base_name(ParTypeSymbol type_symb) {
      ## IMPLEMENT FOR REAL...
      return base_name(type_symb.symbol);
    }
  }


  String safe_name(TaggedInterType[DeclInterType] type, Maybe[Nat] unique_id) {
    suffix = if unique_id != nothing then "_" & printed(value(unique_id)) else "";
    return non_reserved_name(upper_camel_case(type_tag(type)) & suffix);
  }


  String safe_name(UnionInterType type, Maybe[Nat] unique_id) {
    suffix = if unique_id != nothing then "_" & printed(value(unique_id)) else "";
    return non_reserved_name("TypeUnion" & suffix);
  }


  String non_reserved_name(String unsafe_name) {
    name = unsafe_name;
    while reserved_names(name):
      name = "_" & name;
    ;
    return name;
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit prg : CompiledPrg {
  String* type_decl(DeclInterType type, [DeclInterType -> String] types_names, <in, out> direction) =
    type_decl_or_doc(type, types_names = types_names, direction = direction, doc_only = false, root_type = type);

  String* type_docs(DeclInterType type, [DeclInterType -> String] types_names, <in, out> direction) =
    type_decl_or_doc(type, types_names = types_names, direction = direction, doc_only = true, root_type = type);
}


implicit prg : CompiledPrg, types_names : [DeclInterType -> String], direction : <in, out>,
         doc_only : Bool, root_type : DeclInterType {

  String* type_decl_or_doc(TupleInterType type) {
    types = match (direction)
      in  = (input_arg_type(t) : t @ i <- untag(type)),
      out = (return_value_type(t, types_names) : t @ i <- untag(type));
    max_len = max((length(t) : t <- types));
    spaces = (string((ascii_space : i < max_len - length(t))) : t <- types);
    body = ("  public " & t & spaces(i) & " item" & printed(i) & ";" : t @ i <- types);
    header = #(if doc_only then "" else "public static ") & "class " & name_and_parents_decl & " {";
    return (header) & body & ("}");
  }


  String* type_decl_or_doc(RecordInterType type) {
    fields = match (direction)
      in  = [l -> input_arg_type(t) : l, t <- untag(type)],
      out = [l -> return_value_type(t, types_names) : l, t <- untag(type)];
    field_names = java_adjusted_unambiguous_lower_camel_case_names(keys(fields));
    max_len = max([length(t) : unused_var, t <- fields]);
    body = ({
        spaces = string((ascii_space : unused_var < max_len - length(t)));
        return "  public " & t & spaces & " " & field_names(l, !!) & ";";
      } : l, t <- isort(fields)
    );
    header = #(if doc_only then "" else "public static ") & "class " & name_and_parents_decl & " {";
    return (header) & body & ("}");
  }


  String* type_decl_or_doc(NamedInterType type) = type_decl_or_doc(named_interface_types_defs(type, !!));


  String* type_decl_or_doc(TaggedInterType[DeclInterType] type) {
    untagged = untagged_type(type);
    if in(untagged, declared_types):
      return (
        #(if doc_only then "" else "public static ") & "class " & name_and_parents_decl & " {",
        "  " & #(if doc_only then "" else "public ") & types_names(untagged, !!) & " inner;",
        "}"
      );
    else
      return type_decl_or_doc(untagged);
    ;
  }


  String* type_decl_or_doc(UnionInterType type) = (
    "interface " & name_and_parents_decl & " {",
    "",
    "}"
  );


  String* type_decl_or_doc(SymbolInterType type) {
    type_name = types_names(root_type, !!);
    first_line = #(if doc_only then "" else "public static ") & "class " & name_and_parents_decl & " {";
    body = (
      type_name & "() {",
      "",
      "}",
      "",
      "static " & type_name & " singleton = new " & type_name & "();",
      "",
      "public static " & type_name & " singleton() {",
      "  return singleton;",
      "}"
    );
    return (first_line) & #(if doc_only then ("") else indent_lines(body)) & ("}");
  }


  String name_and_parents_decl {
    text = types_names(root_type, !!);
    parents = decl_types_parents(root_type);
    text = text & " implements " & append((types_names(p, !!) : p <- isort(parents)), ", ") if parents != [];
    return text;
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit prg : CompiledPrg {
  String* decl_type_import_function(DeclInterType inter_type) {
    name = decl_type_import_funct_name(inter_type);
    type_name = input_types_names(inter_type, !!);
    type_def = match (inter_type)
      named()   = named_interface_types_defs(inter_type, !!),
      _         = inter_type;
    code = decl_type_import_code(type_def, "obj", "return ");
    sign_line = "static Obj " & name & "(" & type_name & " obj) {";
    return (sign_line) & indent_lines(code) & ("}");
  }


  String* decl_type_export_function(DeclInterType inter_type) {
    name = decl_type_export_funct_name(inter_type);
    type_name = output_types_names(inter_type, !!);
    type_def = match (inter_type)
      named()   = named_interface_types_defs(inter_type, !!),
      _         = inter_type;
    code = export_code(type_def, type_name, "obj", "return ");
    sign_line = "static " & type_name & " " & name & "(Obj obj) {";
    return (sign_line) & indent_lines(code) & ("}");
  }
}

////////////////////////////////////////////////////////////////////////////////

[Symbol -> String] java_adjusted_unambiguous_lower_camel_case_names([Symbol] symbols) {
  nice_field_names = [s -> safe_lower_camel_case(s, false) : s <- symbols];
  conflicting_names = duplicate_values(nice_field_names);
  return [
    l -> if conflicting_names(n) then safe_lower_camel_case(l, true) else n
    : l, n <- nice_field_names
  ];
}

////////////////////////////////////////////////////////////////////////////////

// [InterType -> String] java_type_names([NamedInterType] types) = [
//   ## THIS SHOULD ALSO RESOLVE CONFLICTS WITH OTHER UPPER CAMEL CASE NAMES
//   t -> upper_camel_case(s) : type <- types, named(s?, t?) ?= type
// ];


String safe_lower_camel_case(Symbol symb) = safe_lower_camel_case(symb, false);


String safe_lower_camel_case(Symbol symb, Bool keep_underscore) {
  name = lower_camel_case(symb);
  name = "_" & name if is_reserved(name);
  return name;
}

String safe_lower_camel_case_chain(Symbol+ symbs) {
  name = append((lower_camel_case(s) : s <- symbs), "_");
  name = "_" & name if is_reserved(name);
  return name;
}

////////////////////////////////////////////////////////////////////////////////

InterType strip_tags(InterType type) =
  tagged(_, t?) = strip_tags(t),
  _             = type;

////////////////////////////////////////////////////////////////////////////////

[V] duplicate_values([K -> V] map) = duplicates((v : unused_var, v <- isort(map)));

[K] non_injective_keys([K -> V] map) {
  dup_vals = duplicate_values(map);
  return [k : k, v <- map, dup_vals(v)];
}

[K -> V] remove_non_injective_keys([K -> V] map) {
  keys_to_remove = non_injective_keys(map);
  return [k -> v : k, v <- map, not keys_to_remove(k)];
}

[[+K]] non_injective_keys_by_value([K -> V] map) =
  values(group_by(non_injective_keys(map), map($, !!)));
