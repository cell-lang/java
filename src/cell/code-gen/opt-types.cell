implicit prg : CompiledPrg {
  String** native_opt_type_decls {
    return join(((native_tag_rec_type_decl(s, r, i) : r @ i <- rs) : s, rs <- isort(prg.opt_reprs)));
  }


  String* native_tag_rec_type_decl(Symbol tag, OptRecRepr repr, Nat idx) {
    class_name        = opt_tag_rec_name(tag, idx);
    fields            = untag(repr);
    labels            = keys(fields);
    ord_labels, index = symbols_sets_info(labels, !!);
    ord_mand_labels   = (l : l <- ord_labels, not fields(l, !!).optional);
    ord_opt_labels    = (l : l <- ord_labels, fields(l, !!).optional);
    opt_labels        = set(ord_opt_labels);
    has_opt_fields    = opt_labels != [];

    // Content variables declarations
    native_types  = (native_type(fields(l, !!).repr) : l <- ord_labels);
    types_lengths = (length(s) : s <- native_types);
    max_type_len  = max(types_lengths);
    spaces        = (nat(max_type_len - l + 1) * " " : l <- types_lengths);
    vars_names    = (opt_rec_field_name(l) : l <- ord_labels);
    body          = (native_types(i) & spaces(i) & v & ";" : v @ i <- vars_names);

    // Test variables declarations
    set_test_labels = isort([l : l, f <- fields, f.optional, not is_nullable(f.repr)]);
    if set_test_labels != ():
      test_vars_decls = ("boolean " & opt_rec_field_nonempty_test_var(l) & ";" : l <- set_test_labels);
      body = (body | "") & test_vars_decls;
    ;

    // Actual labels array declaration
    body = (body | "", "int[] labels;") if has_opt_fields;

    // // Mandatory labels hashcodes sum
    // hash_exprs = ("SymbObj.hashCode(" & symb_idx_name(l) & ")" : l <- ord_mand_labels);
    // body = (body | "", "static int staticHashSumPart = " & append(hash_exprs, " + ") & ";");

    // Methods
    reprs = [l -> fields(l, !!).repr : l <- labels];
    let tag = tag, ord_labels = ord_labels, opt_labels = opt_labels, reprs = reprs:
      methods_defs = (
        // get_tag_id_def,
        finish_init_def(ord_mand_labels, ord_opt_labels),
        has_field_def,
        lookup_field_def,
        // hash_code_def(ord_mand_labels, ord_opt_labels),
        internal_order_def(class_name, ord_opt_labels),
        count_fields_def,
        get_labels_def(index)
      );
    ;
    body = body & ("", "") & join(intermix(methods_defs, ("")));

    // Class definition
    header_line = "static final class " & class_name & " extends OptTagRecObj {";
    return (header_line) & indent_lines(body) & ("}");
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////// Methods generation //////////////////////////////

  // String* get_tag_id_def = (
  //   "public int getTagId() {",
  //   "  return " & symb_idx_name(tag) & ";",
  //   "}"
  // );

implicit tag : Symbol, ord_labels : Symbol+, opt_labels : [Symbol], reprs : [Symbol -> LowLevelRepr] {

  String* finish_init_def(Symbol* ord_mand_labels, Symbol* ord_opt_labels) {
    if ord_mand_labels != ():
      hashcodes = (obj_data_expr(reprs(l, !!), opt_rec_field_name(l)) : l <- ord_mand_labels);
      hashcodes_sum = join(hashcodes, " + ");
    else
      hashcodes_sum = "0";
    ;

    code = (
      "public void finishInit() {",
      "  long hashcode = " & hashcodes_sum & ";"
    );

    if opt_opt_labels != ():
      code = (code | "  int mask = 0;");
      for l @ i <- ord_opt_labels:
        code = code & (
          " if (" & set_check_expr(reprs(l, !!), l, "", false) & ") {",
          "   hashcode += " obj_data_expr(reprs(l, !!), opt_rec_field_name(l)) & ";",
          "   mask |= 1 << " & printed(i) & ";",
          "}"
        );
      ;
    else
      mask = "0";
    ;

    set_data_instr = "  data = optTagRecObjData(" symb_idx_name(tag) & ", hashcode, " & mask & ");";
    return code | set_data_instr, "}");
  }

  //////////////////////////////////////////////////////////////////////////////

  String* has_field_def {
    has_field_exprs = (
      if opt_labels(l)
        then "(" & set_check_expr(reprs(l, !!), l, "", false) & " & id == " & symb_idx_name(l) & ")"
        else "id == " & symb_idx_name(l)
      : l <- ord_labels
    );

    return (
      "public boolean hasField(int id) {",
      "  return " & append(has_field_exprs, " | ") & ";",
      "}"
    );
  }

  //////////////////////////////////////////////////////////////////////////////

  String* lookup_field_def {
    cases = ((
        "" if i != 0,
        "case " & symb_idx_name(l) & ":",
        "  return " & native_obj_expr(reprs(l, !!), opt_rec_field_name(l)) & ";"
      ) : l @ i <- ord_labels
    );

    return (
      "public Obj lookupField(int id) {",
      "  Miscellanea._assert(hasField(id));",
      "  switch (id) {"
    ) & indent_lines(indent_lines(join(cases))) & (
      "  }",
      "  throw Miscellanea.internalFail();",
      "}"
    );
  }

  //////////////////////////////////////////////////////////////////////////////

  // String* hash_code_def(Symbol* ord_mand_labels, Symbol* ord_opt_labels) {
  //   hash_exprs = (hash_code_expr(reprs(l, !!), opt_rec_field_name(l)) : l <- ord_mand_labels);
  //   if opt_labels != []:
  //     body = ("int hashSum = staticHashSumPart + " & append(hash_exprs, " + ") & ";");
  //     for l <- ord_opt_labels:
  //       value_hash_expr = hash_code_expr(reprs(l, !!), opt_rec_field_name(l));
  //       body = (body |
  //         "if (" & set_check_expr(reprs(l, !!), l, "", false) & ")",
  //         "  hashSum += SymbObj.hashCode(" & symb_idx_name(l) & ") + " & value_hash_expr & ";"
  //       );
  //     ;
  //     body = (body | "return " & symb_idx_name(tag) & " ^ (hashSum ^ countFields());");
  //   else
  //     body = (
  //       "int hashSum = staticHashSumPart + " & append(hash_exprs, " + ") & ";",
  //       "return " & symb_idx_name(tag) & " ^ (hashSum ^ " & printed(|ord_labels|) & ");"
  //     );
  //   ;

  //   return ("public int hashCode() {") & indent_lines(body) & ("}");
  // }

  //////////////////////////////////////////////////////////////////////////////

  String* extra_data_def(Int idx) = (
    "public int extraData() {",
    "  return optTagRecObjExtraData(" & printed(idx) & ");",
    "}"
  );


  String* internal_order_def(String class_name, Symbol* ord_opt_labels) {
    // if opt_labels != []:
    //   body = (
    //     "",
    //     "    int len = countFields();",
    //     "    int otherLen = otherOpt.countFields();",
    //     "    if (len != otherLen)",
    //     "      return len < otherLen ? 1 : -1;"
    //   );

    //   for l @ i <- ord_opt_labels:
    //     test_var_name = set_check_expr(reprs(l, !!), l, "", true);
    //     unparenthesized_test_var_name = set_check_expr(reprs(l, !!), l, "", false);
    //     other_test_var_name = set_check_expr(reprs(l, !!), l, "otherOpt.", true);
    //     body = (body |
    //       "",
    //       "    if (" & test_var_name & " != " & other_test_var_name & ")",
    //       "      return " & unparenthesized_test_var_name & " ? 1 : -1;" ## NOT SURE ABOUT THIS ONE
    //     );
    //   ;

    //   body = (body | "", "    int res;") if opt_labels(ord_labels(0));

    // else
    //   body = ();
    // ;

    body = ();
    for l @ i <- ord_labels:
      repr = reprs(l, !!);
      optional = opt_labels(l);
      field_name = opt_rec_field_name(l);
      comp_expr = comparison_expr(repr, field_name, "otherOpt." & field_name);
      body = (body | "");
      if i == |ord_labels| - 1 and not optional:
        body = (body | "  return " & comp_expr & ";");
      else
        maybe_var_type = if i == 0 and not optional then "int " else "";
        field_code = (
          maybe_var_type & "res = " & comp_expr & ";",
          "if (res != 0)",
          "  return res;"
        );
        if optional:
          test_var_name = set_check_expr(reprs(l, !!), l, "", false);
          field_code = ("if (" & test_var_name & ") {") & indent_lines(field_code) & ("}");
        ;
        body = body & field_code;
      ;
    ;

    body = (body | "", "return 0;") if opt_labels(rat(ord_labels, 0));

    return (
      "protected int internalOrder(Obj other) {",
      "  " & class_name & " otherOpt = (" & class_name & ") other;"
    ) & indent_lines(body) & (
      "}"
    );
  }

  //////////////////////////////////////////////////////////////////////////////

  String* count_fields_def {
    opt_fields_bits = ("(" & set_check_expr(reprs(l, !!), l, "", false) & " ? 1 : 0)" : l <- isort(opt_labels));
    count_fields_exprs = (printed(|ord_labels| - |opt_labels|)) & opt_fields_bits;

    return (
      "protected int countFields() {",
      "  return " & append(count_fields_exprs, " + ") & ";",
      "}"
    );
  }

  //////////////////////////////////////////////////////////////////////////////

  String* get_labels_def(Nat symb_seq_index) {
    if opt_labels != []:
      body = (
        "if (labels == null) {",
        "  int count = countFields();",
        "  labels = new int[count];",
        "  int idx = 0;"
      );

      for l <- ord_labels:
        label_code = ("  labels[idx++] = " & symb_idx_name(l) & ";");
        if opt_labels(l):
          label_code = ("  if (" & set_check_expr(reprs(l, !!), l, "", false) & ")") & indent_lines(label_code);
        ;
        body = body & label_code;
      ;

      body = (body | "}", "return labels;");

    else
      body = ("return " & const_symb_seq_name(symb_seq_index) & ";");
    ;

    return ("protected int[] getLabels() {") & indent_lines(body) & ("}");
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

String set_check_expr(LowLevelRepr repr, Symbol label, String path, Bool parenthesized) =
  if is_nullable(repr)
    then parenthesize( path & opt_rec_field_name(label) & " != null", parenthesized)
    else path & opt_rec_field_nonempty_test_var(label);


String native_obj_expr(LowLevelRepr repr, String expr) =
  bool    = "SymbObj.get(" & expr & ")",
  int     = "IntObj.get(" & expr & ")",
  float   = "new FloatObj(" & expr & ")",
  symbol  |
  object  = expr;


String obj_data_expr(LowLevelRepr repr, String expr) =
  bool    = "symbObjData(" & expr & ")",
  int     = expr,
  float   = "floatObjData(" & expr & ")",
  symbol  |
  object  = expr & ".data";


String comparison_expr(LowLevelRepr repr, String expr1, String expr2) =
  bool    = "SymbTable.compBools(" & expr1 & ", " & expr2 & ")",
  int     = "IntObj.compare(" & expr1 & ", " & expr2 & ")",
  float   = "FloatObj.compare(" & expr1 & ", " & expr2 & ")",
  symbol  |
  object  = expr1 & ".cmp(" & expr2 & ")";
